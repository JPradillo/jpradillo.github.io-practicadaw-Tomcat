{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Servidores de aplicaciones","text":""},{"location":"#introduccion","title":"Introducci\u00f3n","text":"<p>Un servidor de aplicaciones es un marco mixto de software que permite tanto la creaci\u00f3n de aplicaciones web como un entorno de servidor para ejecutarlas.</p> <p>A menudo puede ser una pila compleja de diferentes elementos computacionales que ejecutan tareas espec\u00edficas que necesitan trabajar como uno solo para alimentar m\u00faltiples nubes y software y aplicaciones basadas en la web.</p> <p>Situado entre el servidor web y el nivel de backend del servidor de bases de datos, el servidor de aplicaciones es esencialmente un intermediario para el servidor de bases de datos y los usuarios de las aplicaciones empresariales o de consumo que soporta mediante el uso de varios protocolos e interfaces de programaci\u00f3n de aplicaciones (API).</p> <p> </p> <p>Es habitual que se utilice junto con un servidor web o que contenga un servidor web, por lo que ambos pueden converger y denominarse servidor de aplicaciones web. Tambi\u00e9n es lo suficientemente vers\u00e1til como para ser utilizado con otros servidores de aplicaciones simult\u00e1neamente.</p> <p>Los servidores de aplicaciones tambi\u00e9n pueden contener sus propias interfaces gr\u00e1ficas de usuario para su gesti\u00f3n a trav\u00e9s de PC, pero tambi\u00e9n pueden ocuparse de sus propios recursos, as\u00ed como del procesamiento de transacciones, la mensajer\u00eda, la agrupaci\u00f3n de recursos y conexiones, y la realizaci\u00f3n de tareas de seguridad.</p>"},{"location":"#servidor-de-aplicaciones","title":"Servidor de aplicaciones","text":"<p>Las aplicaciones vienen en todas las formas, tama\u00f1os y casos de uso. En un mundo en el que dependemos de una serie de procesos empresariales cr\u00edticos, los servidores de aplicaciones son los ordenadores de gran potencia que proporcionan recursos de aplicaciones a los usuarios y clientes web.</p> <p>Los servidores de aplicaciones, como ya hemos dicho, se sit\u00faan f\u00edsica o virtualmente entre los servidores de bases de datos que almacenan los datos de las aplicaciones y los servidores web que se comunican con los clientes. Los servidores de aplicaciones y el middleware af\u00edn son los sistemas operativos que soportan el desarrollo y la entrega de una aplicaci\u00f3n. Ya sea una aplicaci\u00f3n de escritorio, m\u00f3vil o web, los servidores de aplicaciones desempe\u00f1an un papel fundamental en la conexi\u00f3n de un mundo de dispositivos.</p>"},{"location":"#terminologia-de-los-servidores-de-aplicaciones","title":"Terminolog\u00eda de los servidores de aplicaciones","text":"T\u00e9rmino Descripci\u00f3n Servidor web Responsable de almacenar, procesar y entregar los datos de E/S de las p\u00e1ginas web Cliente web Punto final que intenta acceder a los recursos de la web o de la aplicaci\u00f3n HTTPS Protocolo de comunicaci\u00f3n seguro entre el servidor web y los clientes web JSON Lenguaje para el intercambio entre los servidores web y de aplicaciones L\u00f3gica de negocio Reglas para el almacenamiento de datos y la transferencia de recursos Aplicaci\u00f3n Un programa de software o un sitio web unido a una base de datos"},{"location":"#el-papel-del-servidor-de-aplicaciones-en-la-arquitectura-de-servicios","title":"El papel del servidor de aplicaciones en la arquitectura de servicios","text":"<p>Cuando los usuarios de las aplicaciones, ya sea usuarios f\u00edsicos o los clientes web, solicitan acceso a una aplicaci\u00f3n, el servidor de aplicaciones suele hacer el trabajo pesado en el backend para almacenar y procesar las solicitudes din\u00e1micas de las aplicaciones.</p>"},{"location":"#por-que-necesitamos-servidores-de-aplicaciones","title":"\u00bfPor qu\u00e9 necesitamos servidores de aplicaciones?","text":"<p>Miles de millones de clientes web hacen peticiones HTTP cada d\u00eda, esperando un acceso instant\u00e1neo a la aplicaci\u00f3n en cuesti\u00f3n. Headspace durante la rutina de la ma\u00f1ana, Google Docs para el informe extenso, Twitter durante la pausa para el caf\u00e9, no importa la aplicaci\u00f3n en uso, est\u00e1 siendo consultada en un servidor de aplicaciones y devuelta a trav\u00e9s de un servidor web.</p> <p>Los servidores web se encargan de servir a los clientes web peticiones HTTP con respuestas HTTP. A diferencia de los servidores de aplicaciones, el dise\u00f1o del servidor web es lo suficientemente ligero como para procesar las solicitudes de datos est\u00e1ticos de varias aplicaciones (o sitios web), manteniendo la seguridad. Las peticiones din\u00e1micas, a menudo en forma de aplicaciones, requieren asistencia adicional.</p>"},{"location":"#los-servidores-de-aplicaciones-optimizan-el-trafico-y-anaden-seguridad","title":"Los servidores de aplicaciones optimizan el tr\u00e1fico y a\u00f1aden seguridad","text":"<p>Para conseguir una agilidad \u00f3ptima del servidor web, no sirve gestionar tanto las peticiones HTTP de los clientes web como pasar o almacenar recursos de m\u00faltiples sitios web. Los servidores de aplicaciones llenan este vac\u00edo con un dise\u00f1o de alta potencia construido para manejar las solicitudes de contenido web din\u00e1mico.</p> <p>Los servidores de aplicaciones tambi\u00e9n proporcionan redundancia de programas y una capa adicional de seguridad. Una vez desplegado entre una base de datos y un servidor web, el trabajo de preservar y duplicar la arquitectura de la aplicaci\u00f3n a trav\u00e9s de la red es m\u00e1s factible. El paso adicional entre las potenciales comunicaciones web maliciosas y las joyas de la corona en el servidor de base de datos a\u00f1ade una capa de seguridad adicional. Dado que los servidores de aplicaciones pueden procesar solicitudes de l\u00f3gica empresarial, un intento de inyecci\u00f3n SQL es tambi\u00e9n mucho m\u00e1s dif\u00edcil.</p> <p>Las organizaciones pueden proteger a\u00fan m\u00e1s sus datos con un servidor proxy inverso colocado delante de sus bases de datos. Los servidores proxy y las VPN pueden hacer maravillas para anonimizar y encriptar la comunicaci\u00f3n para proteger a los usuarios y los datos de la empresa.</p> <p> </p>"},{"location":"#como-funcionan-los-servidores-de-aplicaciones","title":"\u00bfC\u00f3mo funcionan los servidores de aplicaciones?","text":""},{"location":"#pongamos-como-ejemplo-un-servidor-de-aplicaciones-java","title":"Pongamos como ejemplo un servidor de aplicaciones Java.","text":"<p>\u00bfQu\u00e9 son los servlets?</p> <p>Un servlet es un programa Java que se ejecuta en un servidor Web y construye o sirve p\u00e1ginas web. De esta forma se pueden construir p\u00e1ginas din\u00e1micas, basadas en diferentes fuentes variables: datos proporcionados por el usuario, fuentes de informaci\u00f3n variable (p\u00e1ginas de noticias, por ejemplo), o programas que extraigan informaci\u00f3n de bases de datos.</p> <p>Comparado con un CGI, un servlet es m\u00e1s sencillo de utilizar, m\u00e1s eficiente (se arranca un hilo por cada petici\u00f3n y no un proceso entero), m\u00e1s potente y portable. Con los servlets podremos, entre otras cosas, procesar, sincronizar y coordinar m\u00faltiples peticiones de clientes, reenviar peticiones a otros servlets o a otros servidores u otros.</p> <p>Como la mayor\u00eda de los servidores de hoy en d\u00eda, los servidores de aplicaciones contienen caracter\u00edsticas de seguridad, transacciones, servicios, clustering, diagn\u00f3sticos y bases de datos. En lo que se diferencian los servidores de aplicaciones es en su capacidad para procesar peticiones de servlets (programas Java) desde un servidor web.</p> <p>En la imagen anterior, se muestra el flujo general de los servidores de aplicaciones web:</p> <ol> <li>El cliente abre un navegador y solicita acceso a un sitio web</li> <li>El servidor web recibe la petici\u00f3n HTTP y responde con la p\u00e1gina web deseada</li> <li>El servidor web gestiona las peticiones de datos est\u00e1ticos, pero el cliente quiere utilizar una herramienta interactiva</li> <li>Al tratarse de una petici\u00f3n de datos din\u00e1micos, el servidor web transfiere la petici\u00f3n a un servidor de aplicaciones</li> <li>El servidor de aplicaciones recibe la petici\u00f3n HTTP y la convierte en una petici\u00f3n de servlet</li> <li>El servlet llega al servidor de la base de datos, y el servidor de aplicaciones recibe una respuesta del servlet</li> <li>El servidor de aplicaciones traduce la respuesta del servlet al formato HTTP para el acceso del cliente</li> </ol> <p>Al recibir una solicitud de servlet de un servidor web, el servidor de aplicaciones procesa la solicitud y responde al servidor web mediante la respuesta de servlet. Dado que los servidores de aplicaciones trabajan principalmente con peticiones de l\u00f3gica de negocio, el servidor web traduce la respuesta del servlet y pasa una respuesta HTTP accesible para el usuario.</p> <p> </p> Servidor de aplicaciones Servidor web Dise\u00f1ado para Sirve peticiones HTTP y de otra l\u00f3gica de negocio Sirve peticiones HTTP Alamacena y proporciona L\u00f3gica de negocio Contenido web est\u00e1tico La utilizaci\u00f3n de los recursos es Pesada Ligera Soporta Transacciones distribuidas y Enterprise JavaBeans (EJB) Servlets, Java Server Pages (JSP) y JSON"},{"location":"#servidores-de-aplicaciones-en-la-decada-de-2020","title":"Servidores de aplicaciones en la d\u00e9cada de 2020","text":"<p>El mercado de los servidores de aplicaciones espera crecer a una CAGR del 13,2%, pasando de cerca de 17.000 millones de d\u00f3lares en 2020 a 41.000 millones en 2026. El crecimiento continuo no es una sorpresa, ya que la conectividad a Internet y la dependencia de las aplicaciones crece.</p> <p>La migraci\u00f3n a las plataformas y servicios en la nube y el auge de los dispositivos IoT son dos impulsores clave en el mercado de infraestructura de aplicaciones y middleware moderno. A esto hay que a\u00f1adir un movimiento hacia las pol\u00edticas BYOD (Bring Your Own Device) y una fuerza de trabajo remota que depende de una mayor conectividad y eficiencia operativa.</p>"},{"location":"#servidores-de-aplicaciones-el-mejor-amigo-de-un-servidor-web","title":"Servidores de aplicaciones: El mejor amigo de un servidor web","text":"<p>Los servidores de aplicaciones son fundamentales para las exigencias actuales de interconexi\u00f3n. Las empresas, en \u00faltima instancia, est\u00e1n al servicio de los intereses de los clientes por lo que sin una conexi\u00f3n escalable y estable a los recursos de las aplicaciones, los clientes modernos huir\u00e1n sin mirar atr\u00e1s.</p> <p>Los servidores de aplicaciones asumen el papel de conector y mejor amigo de los servidores web. Cuando los servidores web tienen una petici\u00f3n del cliente que es demasiado para soportar, los servidores de aplicaciones hacen posible mantener la comunicaci\u00f3n sin problemas con el contenido web din\u00e1mico.</p>"},{"location":"#que-es-el-despliegue-de-aplicaciones-web","title":"\u00bfQu\u00e9 es el despliegue de aplicaciones web?","text":"<p>El despliegue en el desarrollo de software y web significa pasar los cambios o actualizaciones de un entorno de funcionamiento a otro. Al configurar un sitio web, siempre se tendr\u00e1 el sitio web en vivo, que se llama el entorno en vivo o entorno de producci\u00f3n.</p> <p>Si se quiere tener la capacidad de hacer cambios sin afectar a un sitio web en producci\u00f3n, se puede (y se debe) a\u00f1adir entornos adicionales. Estos entornos se llaman entornos de desarrollo o entornos de despliegue. Los entornos de desarrollo adicionales suelen ser un entorno local, un entorno de desarrollo y un entorno de preparaci\u00f3n o preproducci\u00f3n. El n\u00famero de entornos que se necesitan depende de cada caso y de la complejidad del proyecto en el que se est\u00e9 trabajando.</p> <p>Aunque los modelos de despliegue pueden variar, el m\u00e1s com\u00fan es el cl\u00e1sico modelo de despliegue \"de izquierda a derecha\" cuando se trabaja con m\u00faltiples entornos de despliegue. En este modelo, los cambios se realizan en entornos locales, de desarrollo o de preparaci\u00f3n (dependiendo de la configuraci\u00f3n) y se van pasando de izquierda a derecha a trav\u00e9s de los diferentes entornos, terminando en el de producci\u00f3n.</p> <p>Una vez completado este proceso de despliegue, los nuevos cambios ser\u00e1n visibles en el entorno activo.</p> <p> </p> <p>En la imagen anterior se muestra una forma muy simplificada y cl\u00e1sica de manejar los despliegues cuando se trabaja con sitios web en un CMS. No necesariamente se necesitan todos los entornos anteriores, pero el proceso sigue siendo el mismo.</p> <p>Al utilizar m\u00faltiples entornos se obtiene una lista de ventajas - la principal es que se pueden hacer cambios sin que afecten a su sitio web en vivo. Una vez que los cambios se hacen, se prueban y est\u00e1n listos para ser pasados a producci\u00f3n, el proceso de despliegue se encarga del resto.</p>"},{"location":"#de-que-pasos-consta-el-proceso-despliegue","title":"\u00bfDe qu\u00e9 pasos consta el proceso despliegue?","text":"<p>El flujo del proceso de despliegue consta de 5 pasos: Planificaci\u00f3n, desarrollo, pruebas, despliegue y supervisi\u00f3n.</p> <p>A continuaci\u00f3n nos adentraremos en cada uno de los 5 pasos, pero antes una nota r\u00e1pida.</p> <p>El flujo del proceso de despliegue que aparece a continuaci\u00f3n cubre los aspectos fundamentales, que se dividen en 5 pasos. Esto no significa que sea la \u00fanica manera de hacerlo - podr\u00eda haber un proceso mejor para cada caso. Es una simplificaci\u00f3n para que cubra las partes m\u00e1s importantes.</p> <ol> <li> <p>Recordar tener un plan de despliegue de software</p> <p>Para asegurarse de que el proceso de despliegue se desarrolle con la mayor fluidez posible, lo mejor es tener un plan de despliegue que se siga en todo momento. Al tener un plan nos aseguramos de que todo se haga de la misma manera cada vez que se realicen cambios. Esto es especialmente \u00fatil cuando varios usuarios trabajan en el mismo proyecto.</p> <p>Un plan de despliegue debe incluir reglas sobre cu\u00e1ndo desplegar desde los entornos locales a los sitios de desarrollo o de puesta en escena, as\u00ed como horarios para cuando los nuevos cambios pueden ir a un entorno en vivo. Al tener un plan establecido, se reduce el riesgo de conflictos entre los diferentes cambios y se asegura que el proceso de despliegue sea lo m\u00e1s f\u00e1cil y fluido posible. Si se est\u00e1 trabajando en un proyecto de c\u00f3digo abierto, tambi\u00e9n da la oportunidad de hacer Release Candidates y dejar que la comunidad lo pruebe para detectar cualquier error que se pueda haber pasado por alto.</p> <p>Adem\u00e1s de un plan general, tambi\u00e9n es importante planificar cada uno de los cambios que se vaya a realizar. Este proceso ser\u00e1 muy r\u00e1pido para los cambios menores, pero deber\u00eda ser mucho m\u00e1s extenso para los grandes cambios. Si se planifica con mucha antelaci\u00f3n, se estar\u00e1 mucho m\u00e1s preparado para tener un proceso de despliegue sin problemas.</p> </li> <li> <p>El desarrollo propiamente dicho</p> <p>Una vez que se tenga el plan en marcha, es el momento de realizar el desarrollo real. Para garantizar que cualquier desarrollo pueda realizarse simult\u00e1neamente y sin romper nada, es importante trabajar \u00fanicamente en entornos locales o de desarrollo. Una vez que el proceso de desarrollo est\u00e1 hecho, es el momento de empezar a probar y desplegar los cambios a trav\u00e9s de la configuraci\u00f3n de su entorno.</p> </li> <li> <p>Probar los cambios</p> <p>Probar los cambios es crucial para garantizar que no haya errores en el entorno de producci\u00f3n final. Pero las pruebas no pueden completarse sin desplegar los cambios en nuevos entornos.</p> <p>Una vez que se haya comprobado que todos los cambios funcionan en el entorno local o de desarrollo, es el momento de desplegar los cambios en el siguiente entorno. Esto debe hacerse hasta el entorno de preproducci\u00f3n, donde se deben realizar las pruebas finales de control de calidad. Si todo est\u00e1 correctamente probado y funciona en un entorno parecido al entorno real, es el momento de desplegarlo en vivo.</p> <p>Si se descubren errores por el camino en cualquier entorno, es importante tener un plan para manejarlos. Por lo general, cualquier cambio que no pase las pruebas en el entorno de ensayo debe ser enviado de nuevo a la fase de desarrollo y -una vez corregido- volver a trabajar en los entornos.</p> </li> <li> <p>Desplegar los cambios en el entorno real</p> <p>Una vez que se han realizado todas las pruebas en los entornos anteriores y se han corregido los errores, es el momento de desplegar los cambios en el entorno real. Esto deber\u00eda ser algo bastante seguro, pero todos los que han trabajado en el desarrollo de software saben que algo puede salir mal.</p> <p>As\u00ed que, aunque es f\u00e1cil detenerse aqu\u00ed, es importante incluir el \u00faltimo paso del proceso: la monitorizaci\u00f3n.</p> </li> <li> <p>Supervisar los cambios</p> <p>Una vez que los nuevos cambios est\u00e9n en marcha y los usuarios reales utilicen activamente el sitio web o la aplicaci\u00f3n, es importante supervisar que todo funcione seg\u00fan lo previsto. Independientemente de la planificaci\u00f3n realizada, existe la posibilidad de que los usuarios se encuentren con problemas o realicen acciones que usted no hab\u00eda previsto durante la planificaci\u00f3n y el desarrollo.</p> <p>Un buen consejo para la monitorizaci\u00f3n es planificar los lanzamientos para los momentos en los que la menor cantidad de usuarios lo noten y en los que se tengan recursos de desarrollo listos en caso de que haya que arreglar algo. De este modo, el n\u00famero de usuarios afectados por cualquier error ser\u00e1 m\u00ednimo y se tendr\u00e1 gente preparada para arreglarlo o revertir los cambios si es necesario.</p> <p>Si se han de revertir los cambios, es importante mantener la calma y tener un proceso para manejarlo con la misma minuciosidad con la que se manejan los despliegues.</p> </li> </ol>"},{"location":"#diferentes-tipos-de-despliegue","title":"Diferentes tipos de despliegue","text":"<p>Cuando se trata del tipo de despliegue, a menudo se divide en dos partes. Por lo general, se dividir\u00e1 entre metadatos y contenido, ya que estos tienen diferentes impactos en un nuevo entorno y deben ser manejados de manera diferente.</p>"},{"location":"#despliegue-de-metadatos","title":"Despliegue de metadatos","text":"<p>Los metadatos incluyen los cambios en el c\u00f3digo, las plantillas, las hojas de estilo, los archivos, etc. Estos cambios a menudo requerir\u00e1n una comprobaci\u00f3n de validaci\u00f3n entre entornos para ver si tiene alg\u00fan conflicto imprevisto que deba resolverse. Muchas herramientas de despliegue incluyen comprobaciones de coherencia y ayudan a guiarte en caso de conflictos.</p>"},{"location":"#despliegue-de-contenidos","title":"Despliegue de contenidos","text":"<p>El contenido, como el texto, las im\u00e1genes y los v\u00eddeos, se maneja de forma diferente durante el despliegue, ya que es menos complicado moverlo entre entornos que los metadatos. Por esa raz\u00f3n, a menudo ver\u00e1s que las herramientas de despliegue hacen que el despliegue de contenido sea accesible para los editores de contenido y no s\u00f3lo para los desarrolladores. De esta manera, un editor de contenidos no depende de un desarrollador cuando se trata de enviar nuevos contenidos a un entorno activo.</p>"},{"location":"#mejores-practicas-de-despliegue","title":"Mejores pr\u00e1cticas de despliegue","text":"<p>Cuando se trabaja con entornos de despliegue, es importante, como se ha mencionado anteriormente, tener un plan y un proceso claro para ello en el equipo. Para ampliar ese proceso hemos reunido algunas mejores pr\u00e1cticas que son buenas para implementar como parte de su proceso.</p> <p>Se ha de tener en cuenta que las siguientes pr\u00e1cticas recomendadas se refieren principalmente al desarrollo de software y de la web. Si se est\u00e1n llevando a cabo otros tipos de desarrollo puede haber otras cosas a considerar en el flujo de trabajo de despliegue.</p>"},{"location":"#utilizar-git","title":"Utilizar Git","text":"<p>Esto puede parecer obvio, pero tener un sistema de control de versiones es inestimable para cualquier flujo de trabajo de despliegue. Sin \u00e9l, es probable que se produzcan errores si se trabaja en equipo.</p> <p>Incluso si eres el \u00fanico desarrollador que trabaja en un proyecto, es muy recomendable utilizar Git en caso de que necesites volver a versiones anteriores o si alguien nuevo se une a tu equipo.</p> <p>Sin Git ser\u00e1 dif\u00edcil asegurar la consistencia en el flujo de trabajo de despliegue y puede llevar a que se cometan m\u00e1s errores por desplegar c\u00f3digo inacabado o por no tener a todos los miembros del equipo trabajando en la misma versi\u00f3n del c\u00f3digo.</p>"},{"location":"#trabajar-en-ramas","title":"Trabajar en ramas","text":"<p>Como regla general, tu equipo deber\u00eda trabajar en ramas. Hacerlo as\u00ed permitir\u00e1 trabajar en varias cosas al mismo tiempo sin que se afecten entre s\u00ed.</p> <p>Un ejemplo es cuando se encuentra un error que debe ser corregido. Si un desarrollador est\u00e1 utilizando una rama para trabajar en una nueva caracter\u00edstica, puede hacer r\u00e1pidamente una nueva rama del entorno de desarrollo para trabajar en el error. De este modo, habr\u00e1 dos ramas diferentes que no chocar\u00e1n ni crear\u00e1n posibles conflictos de fusi\u00f3n m\u00e1s adelante.</p> <p>Trabajar con ramas tambi\u00e9n ayuda al equipo con las preguntas y respuestas a la hora de desplegar en un entorno de preproducci\u00f3n. Tener los cambios en ramas separadas y fusionarlas dar\u00e1 a los testers una mejor visi\u00f3n de lo que se empuj\u00f3 (se hizo push) y lo que deben probar.</p>"},{"location":"#utilizar-un-entorno-local-como-entorno-de-desarrollo","title":"Utilizar un entorno local como entorno de desarrollo","text":"<p>Aunque es posible trabajar directamente en un entorno de desarrollo, en la mayor\u00eda de los casos se ahorrar\u00e1 mucho tiempo trabajando localmente. Al instalar el sitio web o el software de forma local, se podr\u00e1 trabajar de forma m\u00e1s eficiente y acelerar las pruebas y la verificaci\u00f3n del c\u00f3digo.</p> <p>En primer lugar, no tienes hay que confirmar, empujar y desplegar constantemente un cambio antes de poder verificar si funciona. Y cuando algo no funciona (esto nos pasa a todos) tendr\u00e1s que revertirlo, empujarlo de nuevo y volver a desplegarlo.</p> <p>En lugar de eso, puedes simplemente ejecutarlo todo localmente y, una vez que funcione como es debido, puedes empujarlo directamente al entorno de preparaci\u00f3n para una prueba m\u00e1s rigurosa.</p>"},{"location":"#revisar-las-diferencias-antes-de-desplegarlo-en-el-entorno-real","title":"Revisar las diferencias antes de desplegarlo en el entorno real","text":"<p>Una vez que el equipo de pruebas se haya asegurado de que todo funciona en el entorno de pruebas, es el momento de desplegar el c\u00f3digo en el entorno real.</p> <p>Pero antes de hacer el despliegue final, es importante hacer una revisi\u00f3n final de las diferencias entre el entorno actual en producci\u00f3n y el entorno de desarrollo del que se parte.</p> <p>Incluso despu\u00e9s de las pruebas exhaustivas y la garant\u00eda de calidad, las cosas pueden ir mal tan pronto como se llega al entorno real. Y una vez que eso sucede, a menudo puede ser muy estresante implementar correcciones r\u00e1pidas o hacer una reversi\u00f3n completa de la versi\u00f3n. Por lo general, se querr\u00e1 evitar esto a toda costa, por lo que es muy recomendable hacer una revisi\u00f3n final del c\u00f3digo antes de pulsar el bot\u00f3n de despliegue.</p>"},{"location":"#considerar-tener-grupos-de-usuarios-con-diferentes-permisos","title":"Considerar tener grupos de usuarios con diferentes permisos","text":"<p>Mientras que cualquier desarrollador debe ser capaz de empujar los cambios a los entornos de test, puede ser una buena idea para restringir qui\u00e9n puede desplegarlos en vivo.</p> <p>Para los equipos m\u00e1s peque\u00f1os, esto puede no tener mucho sentido, ya que puede crear un cuello de botella para implantar nuevos cambios. Pero si se trata de un equipo m\u00e1s grande con un nivel de experiencia muy variado entre los miembros del equipo, puede ser una gran idea dejar que s\u00f3lo los desarrolladores senior desplieguen en el entorno de producci\u00f3n.</p> <p>Esto asegura efectivamente un mayor nivel de control sobre el flujo de releases y tambi\u00e9n significa que al menos un par de ojos senior han visto lo que est\u00e1 pasando en el entorno real. Si lo que se tiene es un enfoque muy iterativo con lanzamientos r\u00e1pidos como el utilizado en la metodolog\u00eda CD (Continous Delivery), esto podr\u00eda ralentizarlo todo demasiado. Aun as\u00ed, dado que los cambios que se empujan son normalmente m\u00e1s peque\u00f1os con este enfoque, probablemente no se sufrir\u00e1n grandes retrasos. Y si significa detectar algunos errores m\u00e1s, el tiempo que se ahorra al no tener que corregir errores compensar\u00e1 el tiempo invertido.</p> <p>Hablando de romper cosas...</p>"},{"location":"#mantener-la-calma-incluso-si-algo-se-rompe","title":"Mantener la calma, incluso si algo se rompe","text":"<p>Acabas de desplegar en tu entorno de producci\u00f3n y ahora tu sitio web est\u00e1 roto. Menuda liada, \u00bfahora qu\u00e9 se hace?</p> <p>Desgraciadamente, estas cosas ocurren - no importa lo cuidadoso que se sea. Pero en lugar de entrar en p\u00e1nico y aplicar hotfixes o retroceder inmediatamente, es importante mantener la calma y asegurarse de que lo que est\u00e1 haciendo no va a romper las cosas a\u00fan m\u00e1s.</p> <p>En primer lugar, se deber\u00eda comprobar si es posible realizar una reversi\u00f3n o rollback y si realmente se arreglar\u00eda algo. En algunas situaciones, es posible que se hayan hecho cambios que son irreversibles y un rollback s\u00f3lo causar\u00eda problemas a\u00fan mayores.</p> <p>Tambi\u00e9n hay que comprobar si lo que se ha roto es una caracter\u00edstica existente o nueva. De nuevo, si la cosa que se rompi\u00f3 no era parte de la nueva versi\u00f3n, probablemente no servir\u00e1 de nada hacer un rollback.</p> <p>As\u00ed que en lugar de entrar en p\u00e1nico, se debe tener un plan preparado y respirar hondo antes de ponerse a trabajar en la b\u00fasqueda de una soluci\u00f3n. Puede parecer sencillo, pero puede ayudar a salir de una mala situaci\u00f3n mucho m\u00e1s r\u00e1pido que si lanz\u00e1ndose directamente.</p>"},{"location":"#a-que-hora-del-dia-se-deben-desplegar-los-cambios","title":"\u00bfA qu\u00e9 hora del d\u00eda se deben desplegar los cambios?","text":"<p>En caso de que algo se rompa al desplegar en el entorno de producci\u00f3n, es importante encontrar el mejor momento para hacerlo. Y aunque este momento var\u00eda mucho de un proyecto a otro, hay dos preguntas que pueden hacerse para determinar cu\u00e1ndo desplegar los cambios:</p> <ol> <li>\u00bfCu\u00e1ndo tiene la menor cantidad de usuarios activos?</li> <li>\u00bfCu\u00e1ndo tiene a alguien preparado para supervisar y solucionar los problemas despu\u00e9s del despliegue?</li> </ol>"},{"location":"#cuando-tiene-el-menor-numero-de-usuarios-activos","title":"\u00bfCu\u00e1ndo tiene el menor n\u00famero de usuarios activos?","text":"<p>Por lo general, lo que se quiere es que el menor n\u00famero posible de personas se vea afectado por sus nuevos cambios. Por lo tanto, como regla general, debe buscar cualquier momento del d\u00eda en el que el menor n\u00famero de usuarios est\u00e9 utilizando activamente el sitio web o software.</p> <p>En el caso de los sitios web, esto puede hacerse consultando las herramientas de an\u00e1lisis de datos que se tengan en marcha, por ejemplo, Google Analytics. All\u00ed se podr\u00e1n crear informes personalizados que muestren a qu\u00e9 hora del d\u00edase tiene menos tr\u00e1fico, as\u00ed como identificar las horas punta en las que definitivamente no se deber\u00eda hacer ning\u00fan cambio.</p> <p>Adem\u00e1s de mirar la hora del d\u00eda, tambi\u00e9n puede valer la pena mirar c\u00f3mo se reparte la actividad de los usuarios entre los d\u00edas de la semana.</p> <p>Este an\u00e1lisis es muy bueno, pero a menudo acabar\u00e1 con la misma respuesta: Deber\u00edan publicarse los cambios durante la noche. Y aunque esto podr\u00eda parecer una gran idea si s\u00f3lo nos fij\u00e1ramos en esta cuesti\u00f3n, es importante que tambi\u00e9n tengamos en cuenta la siguiente.</p>"},{"location":"#hay-alguien-despierto-y-preparado-para-solucionar-posibles-problemas-en-ese-momento","title":"\u00bfHay alguien despierto y preparado para solucionar posibles problemas en ese momento?","text":"<p>Si la respuesta es no, entonces desplegar los cambios en mitad de la noche podr\u00eda no ser la mejor idea.</p> <p>En su lugar, se deber\u00edan identificar las franjas horarias en las que puedas encontrar el mejor equilibrio entre el n\u00famero de usuarios activos y los desarrolladores dispuestos a solucionar los problemas. Esto variar\u00e1 mucho dependiendo del proyecto y del equipo, pero en general, se deber\u00edan encontrar algunas opciones. Y si ya se tiene un horario fijo de despliegue, incluso puede convencerse al equipo de que est\u00e9 listo a horas extra\u00f1as del d\u00eda. Es mucho m\u00e1s f\u00e1cil convencer a alguien de que venga unas horas antes si sabe que s\u00f3lo ocurre una vez cada ciclo o sprint.</p> <p>Es por este motivo que en muchas empresas se trabaja con guardias rotativas para ofrecer una disponibilidad total.</p> <p>Info</p> <p>Aunque no hay un momento perfecto para el despliegue, definitivamente hay momentos que son mejores que otros.</p>"},{"location":"#cuales-son-las-ventajas-del-despliegue-y-de-los-entornos-multiples","title":"\u00bfCu\u00e1les son las ventajas del despliegue y de los entornos m\u00faltiples?","text":""},{"location":"#reduccion-del-riesgo-de-romper-un-sitio-web-en-produccion","title":"Reducci\u00f3n del riesgo de romper un sitio web en producci\u00f3n","text":"<p>Una de las principales razones para utilizar m\u00faltiples entornos y confiar en el despliegue es reducir el riesgo de que los cambios tengan un impacto negativo en un sitio web en vivo. Mientras que los cambios menores se pueden hacer f\u00e1cilmente directamente en un sitio web en vivo, los cambios m\u00e1s grandes se pueden hacer en entornos separados sin el riesgo de romper nada en el entorno en vivo.</p> <p>Tener varios usuarios trabajando en el mismo sitio web tambi\u00e9n garantiza que nadie se arriesgue a romper algo debido a los cambios de otro usuario.</p>"},{"location":"#ahorro-de-tiempo","title":"Ahorro de tiempo","text":"<p>Sin la preocupaci\u00f3n de romper algo en un sitio web en vivo, se pueden realizar los cambios en el orden que se prefiera. Esto significa que se puede optimizar el flujo de trabajo para realizar los cambios sin tener en cuenta el aspecto o el funcionamiento del sitio web mientras se lleva a cabo.</p> <p>Si se trabaja en un entorno local tambi\u00e9n existe la ventaja de que los cambios se procesan m\u00e1s r\u00e1pido y no hay dependencias de ning\u00fan problema de conectividad.</p> <p>A la hora de desplegar los cambios, tambi\u00e9n se ahorrar\u00e1 tiempo, ya que se podr\u00e1n realizar todos los cambios al mismo tiempo en lugar de tener que hacerlo en varios pasos m\u00e1s peque\u00f1os.</p>"},{"location":"#el-contenido-sensible-al-tiempo-es-mas-facil-de-gestionar","title":"El contenido sensible al tiempo es m\u00e1s f\u00e1cil de gestionar","text":"<p>Si se est\u00e1n llevando a cabo campa\u00f1as que son sensibles al tiempo y que s\u00f3lo pueden ponerse en marcha a partir de un determinado d\u00eda u hora, entonces la ejecuci\u00f3n de m\u00faltiples entornos y el uso del despliegue pueden ahorrar una gran cantidad de estr\u00e9s.</p> <p>Al crear todo el contenido en un entorno de puesta en escena/preprod (o similar) puedes terminar tu campa\u00f1a sin preocuparte de que sea visible para tus usuarios. Y cuando llegue el momento de lanzarla, podr\u00e1 hacerla visible en muy poco tiempo despleg\u00e1ndola en su entorno real.</p> <p>Y si la herramienta de despliegue incluye roles de usuario con configuraci\u00f3n de permisos, es posible que un editor de contenidos haga todo esto -incluyendo el despliegue de los cambios- sin involucrar a un desarrollador en el proceso.</p>"},{"location":"#despliegue-de-aplicaciones-java","title":"Despliegue de aplicaciones Java","text":""},{"location":"#introduccion_1","title":"Introducci\u00f3n","text":"<p>En el lado del servidor, tenemos que conseguir que nuestro servidor HTTP sea capaz de ejecutar programas de aplicaci\u00f3n que recojan los par\u00e1metros de peticiones del cliente, los procesen y devuelvan al servidor un documento que \u00e9ste pasar\u00e1 a su vez al cliente.</p> <p>As\u00ed, para el cliente el servidor no habr\u00e1 hecho nada distinto a lo estipulado en el protocolo HTTP, pero el servidor podr\u00e1 valerse de herramientas externas para procesar y servir la petici\u00f3n solicitada, pudiendo as\u00ed no limitarse a servir p\u00e1ginas est\u00e1ticas, sino utilizar otras aplicaciones (servlets, JSP...) para servir documentos con contenido din\u00e1mico.</p> <p>Los programas de aplicaci\u00f3n son t\u00edpicamente programas que realizan consultas a bases de datos, procesan la informaci\u00f3n resultante y devuelven la salida al servidor, entre otras tareas.</p> <p>Vamos a centrarnos en las aplicaciones web JavaEE, en las que los componentes din\u00e1micos que recibir\u00e1n las peticiones HTTP en el servidor ser\u00e1n los servlets y JSPs. Estos componentes podr\u00e1n analizar esta petici\u00f3n y utilizar otros componentes Java para realizar las acciones necesarias (beans, EJBs, etc).</p>"},{"location":"#estructura-de-una-aplicacion-java","title":"Estructura de una aplicaci\u00f3n Java","text":"<p>Una aplicaci\u00f3n web JavaEE que utilice servlets o p\u00e1ginas JSP debe tener una estructura de ficheros y directorios determinada:</p> <ul> <li>En el directorio ra\u00edz de la aplicaci\u00f3n se colocan las p\u00e1ginas HTML o JSP (podemos dividirlas tambi\u00e9n en directorios si queremos)</li> <li>Colgando del directorio inicial de la aplicaci\u00f3n, se tiene un directorio WEB-INF, que contiene la informaci\u00f3n Web relevante para la aplicaci\u00f3n.</li> <li>El resto de elementos de la aplicaci\u00f3n (im\u00e1genes, etc), podemos estructurarlos como nos convenga.</li> </ul> <p>Esta estructura estar\u00e1 contenida dentro de alg\u00fan directorio, que ser\u00e1 el directorio correspondiente a la aplicaci\u00f3n Web, y que podremos, si lo hacemos convenientemente, copiar en el servidor que nos convenga. Es decir, cualquier servidor Web JavaEE soporta esta estructura en una aplicaci\u00f3n Web, s\u00f3lo tendremos que copiarla en el directorio adecuado de cada servidor.</p> <p>Cada aplicaci\u00f3n web JavaEE es un contexto, una unidad que comprende un conjunto de recursos, clases Java y su configuraci\u00f3n. Cuando hablemos de contexto, nos estaremos refiriendo a la aplicaci\u00f3n web en conjunto.</p>"},{"location":"#empaquetamiento","title":"Empaquetamiento","text":"<p>Una forma de distribuir aplicaciones Web es empaquetar toda la aplicaci\u00f3n (a partir de su directorio inicial) dentro de un fichero WAR (de forma parecida a como se hace con un TAR o un JAR), y distribuir dicho fichero. Podemos crear un fichero WAR de la misma forma que creamos un JAR, utilizando la herramienta JAR.</p> <p>Estos ficheros WAR son un est\u00e1ndar de JavaEE, por lo que podremos utilizarlos en los diferentes servidores de aplicaciones JavaEE existentes.</p>"},{"location":"#despliegue-de-archivos-war","title":"Despliegue de archivos WAR","text":"<p>Los archivos WAR, son un tipo especial de JAR utilizado para distribuir los artefactos o contenido de las aplicaciones Web en tecnolog\u00eda JEE: p\u00e1ginas Web HTML o JSP,clases Java, servlets Java, archivos XML, librer\u00edas de etiquetas (tag libraries) y otros recursos.</p> <p>El empaquetamiento en archivos WAR es algo est\u00e1ndar, pero no as\u00ed el proceso de despliegue, que es dependiente del servidor. No obstante, la mayor\u00eda de servidores JavaEE funcionan en este aspecto de modo similar: permiten desplegar las aplicaciones desde una consola de administraci\u00f3n y tambi\u00e9n \"dejando caer\" el fichero en determinado directorio.</p>"},{"location":"#maven","title":"Maven","text":"<p>Maven es una herramienta open-source, que se cre\u00f3 en 2001 con el objetivo de simplificar los procesos de build (compilar y generar ejecutables a partir del c\u00f3digo fuente).</p> <p>Antes de existir Maven, si quer\u00edamos compilar y generar ejecutables de un proyecto, ten\u00edamos que analizar qu\u00e9 partes de c\u00f3digo se deb\u00edan compilar, qu\u00e9 librer\u00edas utilizaba el c\u00f3digo, d\u00f3nde incluirlas, qu\u00e9 dependencias de compilaci\u00f3n hab\u00eda en el proyecto\u2026</p> <p>En el mejor de los casos, se empleaban unos pocos minutos para saber c\u00f3mo hacer una build del proyecto. En el peor de los casos, el proceso de build era tan complejo que un desarrollador pod\u00eda tardar horas en saber c\u00f3mo compilar y generar los ejecutables a partir del c\u00f3digo.</p> <p>Ahora, la build de cualquier proyecto Maven, independientemente de sus m\u00f3dulos, dependencias o librer\u00edas, consiste simplemente en ejecutar el comando mvn <code>install</code>.</p> <p>Por otra parte, antes de Maven, cada vez que sal\u00eda una nueva versi\u00f3n de un analizador est\u00e1tico de c\u00f3digo, de un framework de pruebas unitarias (como JUnit) o cualquier librer\u00eda, hab\u00eda que parar todo el desarrollo para reajustar el proceso de build a las nuevas necesidades.</p> <p>Y\u2026 \u00bfc\u00f3mo se ejecutaban las pruebas? \u00bfC\u00f3mo se generaban informes? Sin Maven, en cada proyecto esto se hac\u00eda de distinta manera.</p> <p> </p> <p>Lo cierto es que Maven es mucho m\u00e1s que una herramienta que hace builds del c\u00f3digo.</p> <p>Podr\u00edamos decir, que Maven es una herramienta capaz de gestionar un proyecto software completo, desde la etapa en la que se comprueba que el c\u00f3digo es correcto, hasta que se despliega la aplicaci\u00f3n, pasando por la ejecuci\u00f3n de pruebas y generaci\u00f3n de informes y documentaci\u00f3n.</p> <p>Para ello, en Maven se definen tres ciclos de build del software con una serie de etapas diferenciadas. Por ejemplo el ciclo por defecto tiene las etapas de:</p> <ul> <li>Validaci\u00f3n (validate): Validar que el proyecto es correcto. Compilaci\u00f3n (compile).</li> <li>Test (test): Probar el c\u00f3digo fuente usando un framework de pruebas unitarias.</li> <li>Empaquetar (package): Empaquetar el c\u00f3digo compilado y transformarlo en alg\u00fan formato tipo .jar o .war.</li> <li>Pruebas de integraci\u00f3n (integration-test): Procesar y desplegar el c\u00f3digo en alg\u00fan entorno donde se puedan ejecutar las pruebas de integraci\u00f3n.</li> <li>Verificar que el c\u00f3digo empaquetado es v\u00e1lido y cumple los criterios de calidad (verify).</li> <li>Instalar el c\u00f3digo empaquetado en el repositorio local de Maven, para usarlo como dependencia de otros proyectos (install).</li> <li>Desplegar el c\u00f3digo a un entorno (deploy).</li> </ul> <p>Para poder llevar a cabo alguna de estas fases en nuestro c\u00f3digo, tan solo tendremos que ejecutar <code>mvn</code> y el nombre de la fase (la palabra que puse entre par\u00e9ntesis). Adem\u00e1s van en cadena, es decir, si empaquetamos el c\u00f3digo (package), Maven ejecutar\u00e1 desde la fase de validaci\u00f3n (validate) a empaquetaci\u00f3n (package). As\u00ed de simple.</p> <p>Por otra parte, con Maven la gesti\u00f3n de dependencias entre m\u00f3dulos y distintas versiones de librer\u00edas se hace muy sencilla. En este caso, solo tenemos que indicar los m\u00f3dulos que componen el proyecto, o qu\u00e9 librer\u00edas utiliza el software que estamos desarrollando en un fichero de configuraci\u00f3n de Maven del proyecto llamado POM (Project Object Module).</p> <p>Adem\u00e1s, en el caso de las librer\u00edas, no tienes ni tan siquiera que descargarlas a mano. Maven posee un repositorio remoto (Maven central) donde se encuentran la mayor\u00eda de librer\u00edas que se utilizan en los desarrollos de software, y que la propia herramienta se descarga cuando sea necesario.</p> <p>Digamos que Maven aporta una sem\u00e1ntica com\u00fan al proceso de build y desarrollo del software.</p> <p>Incluso, establece una estructura com\u00fan de directorios para todos los proyectos. Por ejemplo el c\u00f3digo estar\u00e1 en <code>${ra\u00edz del proyecto}/src/main/java</code>, los recursos en <code>${ra\u00edz del proyecto }/src/main/resources</code>. Los tests est\u00e1n en <code>${ra\u00edz del proyecto }/src/test</code>.</p>"},{"location":"#despliegue-de-aplicaciones-nodejs-con-express","title":"Despliegue de aplicaciones Node.js con Express","text":""},{"location":"#que-es-nodejs","title":"\u00bfQu\u00e9 es Node.js?","text":"<p>Node JS es un entorno de ejecuci\u00f3n de JavaScript r\u00e1pido que utilizamos para construir aplicaciones del lado del servidor, pero por s\u00ed mismono sabe c\u00f3mo servir archivos, manejar peticiones ni m\u00e9todos HTTP, as\u00ed que aqu\u00ed es donde entra en juego Express JS.</p> <p>Node.js no es un lenguaje de programaci\u00f3n. M\u00e1s bien, es un entorno de ejecuci\u00f3n que se utiliza para ejecutar JavaScript fuera del navegador.</p> <p> </p> <p>Node.js tampoco es un framework (una plataforma para desarrollar aplicaciones de software). El tiempo de ejecuci\u00f3n de Node.js se construye sobre un lenguaje de programaci\u00f3n -en este caso, JavaScript- y ayuda a la ejecuci\u00f3n de los propios frameworks.</p> <p>En resumen, Node.js no es un lenguaje de programaci\u00f3n ni un marco de trabajo; es un entorno para ellos.</p>"},{"location":"#que-es-express","title":"\u00bfQu\u00e9 es Express?","text":"<p>Express JS es un framework de Node.js dise\u00f1ado para construir aplicaciones web de API's y aplicaciones m\u00f3viles multiplataforma de forma r\u00e1pida y hacer que Node.js sea f\u00e1cil.</p> <p> </p>"},{"location":"#que-es-npm","title":"\u00bfQu\u00e9 es npm?","text":"<p>NPM responde a las siglas de Node Package Manager o manejador de paquetes de node, es la herramienta por defecto de JavaScript para la tarea de compartir e instalar paquetes.</p> <p> </p> <p>Tal como reza su documentaci\u00f3n, npm se compone de al menos dos partes principales.</p> <ul> <li>Un repositorio online para publicar paquetes de software libre para ser utilizados en proyectos Node.js</li> <li>Una herramienta para la terminal (command line utility) para interactuar con dicho repositorio que te ayuda a la instalaci\u00f3n de utilidades, manejo de dependencias y la publicaci\u00f3n de paquetes.</li> </ul> <p>As\u00ed pues, NPM es un gestor de paquetes para Javascript. Es una especie de Maven para paquetes Javascript, es decir, sirve para instalar y gestionar versiones de paquetes y librer\u00edas js.</p> <p>NPM lleva mucho tiempo siendo el referente en cuanto a gestores de paquetes javascript, pero desde hace un tiempo le ha salido un competidor: Yarn. Los de yarn aseguran que su gestor de librer\u00edas js es mucho m\u00e1s r\u00e1pido y potente, pero de momento el uso de NPM es mayoritario.</p>"},{"location":"#packagejson","title":"package.json","text":"<p>Cada proyecto en JavaScript puede enfocarse como un paquete npm con su propia informaci\u00f3n de paquete y su archivo <code>package.json</code> para describir el proyecto.</p> <p><code>package.json</code> se generar\u00e1 cuando se ejecute npm init para inicializar un proyecto JavaScript/Node.js, con los siguientes metadatos b\u00e1sicos proporcionados por los desarrolladores:</p> <ul> <li>name: el nombre de la librer\u00eda/proyecto JavaScript</li> <li>version: la versi\u00f3n del proyecto.</li> <li>description: la descripci\u00f3n del proyecto</li> <li>license: la licencia del proyecto</li> </ul>"},{"location":"#npm-scripts","title":"NPM scripts","text":"<p>package.json tambi\u00e9n soporta la propiedad scripts que puede definirse para ejecutar herramientas de l\u00ednea de comandos que se instalan en el contexto local del proyecto. Por ejemplo, la porci\u00f3n de scripts de un proyecto npm puede tener un aspecto similar a este:</p> <pre><code>{\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"format\": \"prettier --write **/*.ts\",\n    \"format-check\": \"prettier --check **/*.ts\",\n    \"lint\": \"eslint src/**/*.ts\",\n    \"pack\": \"ncc build\",\n    \"test\": \"jest\",\n    \"all\": \"npm run build &amp;&amp; npm run format &amp;&amp; npm run lint &amp;&amp; npm run pack &amp;&amp; npm test\"\n  }\n}\n</code></pre> <p>Con eslint, prettier, ncc, jest no necesariamente instalados como ejecutables globales sino como locales de tu proyecto dentro de <code>node_modules/.bin/</code>.</p>"},{"location":"#cicd-continous-integrationcontinous-deployment-delivery","title":"CI/CD (Continous Integration/Continous Deployment-Delivery)","text":"<p>La CI/CD es un m\u00e9todo para distribuir las aplicaciones a los clientes con frecuencia mediante el uso de la automatizaci\u00f3n en las etapas del desarrollo de aplicaciones. Los principales conceptos que se le atribuyen son la integraci\u00f3n, la distribuci\u00f3n y la implementaci\u00f3n continuas. Se trata de una soluci\u00f3n para los problemas que puede generar la integraci\u00f3n del c\u00f3digo nuevo para los equipos de desarrollo y de operaciones (tambi\u00e9n conocida como \"el infierno de la integraci\u00f3n\").</p> <p>En concreto, el proceso de integraci\u00f3n y distribuci\u00f3n continuas incorpora la automatizaci\u00f3n y la supervisi\u00f3n permanentes en todo el ciclo de vida de las aplicaciones, desde las etapas de integraci\u00f3n y prueba hasta las de distribuci\u00f3n e implementaci\u00f3n. Este conjunto de pr\u00e1cticas se conoce como \"canales de CI/CD\" y cuenta con el respaldo de los equipos de desarrollo y de operaciones que trabajan en conjunto de manera \u00e1gil, con un enfoque de DevOps o de ingenier\u00eda de confiabilidad del sitio (SRE).</p>"},{"location":"#cual-es-la-diferencia-entre-la-integracion-la-distribucion-y-la-implementacion-continuas","title":"\u00bfCu\u00e1l es la diferencia entre la integraci\u00f3n, la distribuci\u00f3n y la implementaci\u00f3n continuas?","text":"<p>Estas siglas tienen diferentes significados. \"CI\" siempre se refiere a la integraci\u00f3n continua, que es un proceso de automatizaci\u00f3n para los desarrolladores. El \u00e9xito de la CI implica que se dise\u00f1en, prueben y combinen los cambios nuevos en el c\u00f3digo de una aplicaci\u00f3n con regularidad en un repositorio compartido. Supone una soluci\u00f3n al problema de que se desarrollen demasiadas divisiones de una aplicaci\u00f3n al mismo tiempo, que luego podr\u00edan entrar en conflicto entre s\u00ed.</p> <p>La sigla \"CD\" se refiere a la distribuci\u00f3n o la implementaci\u00f3n continuas, y se trata de conceptos relacionados que suelen usarse indistintamente. Ambos se refieren a la automatizaci\u00f3n de las etapas posteriores del proceso, pero a veces se usan por separado para explicar hasta d\u00f3nde llega la automatizaci\u00f3n.</p> <p>Por lo general, la distribuci\u00f3n continua se refiere a que los cambios que implementa un desarrollador en una aplicaci\u00f3n se someten a pruebas autom\u00e1ticas de errores y se cargan en un repositorio (como GitHub o un registro de contenedores), para que luego el equipo de operaciones pueda implementarlos en un entorno de producci\u00f3n en vivo. Es una soluci\u00f3n al problema de la falta de supervisi\u00f3n y comunicaci\u00f3n entre los equipos comerciales y de desarrollo, as\u00ed que su prop\u00f3sito es garantizar que la implementaci\u00f3n del c\u00f3digo nuevo se lleve a cabo con el m\u00ednimo esfuerzo.</p> <p>La implementaci\u00f3n continua (la otra definici\u00f3n de \"CD\") hace referencia al lanzamiento autom\u00e1tico de los cambios que implementa el desarrollador desde el repositorio hasta la producci\u00f3n, para ponerlos a disposici\u00f3n de los clientes. As\u00ed ya no se sobrecarga a los equipos de operaciones con procesos manuales que retrasan la distribuci\u00f3n de las aplicaciones. Con este tipo de implementaci\u00f3n, se aprovechan los beneficios de la distribuci\u00f3n continua y se automatiza la siguiente etapa del proceso.</p> <p> </p> <p>La CI/CD puede incluir solamente la integraci\u00f3n y la distribuci\u00f3n continuas, o las tres pr\u00e1cticas vinculadas, con la implementaci\u00f3n continua. Para complicar un poco m\u00e1s las cosas, a veces se utiliza el t\u00e9rmino \"distribuci\u00f3n continua\" para abarcar tambi\u00e9n los procesos de la implementaci\u00f3n continua.</p> <p>En realidad, no vale la pena profundizar en la sem\u00e1ntica. Solo debe recordar que la integraci\u00f3n y la distribuci\u00f3n continuas son un proceso que suele percibirse como una canalizaci\u00f3n e implica incorporar un alto nivel de automatizaci\u00f3n permanente y supervisi\u00f3n constante al desarrollo de las aplicaciones.</p> <p>El significado de los t\u00e9rminos var\u00eda en cada caso y depende de la cantidad de automatizaci\u00f3n que se haya incorporado a la canalizaci\u00f3n de integraci\u00f3n y distribuci\u00f3n continuas. Muchas empresas comienzan con la incorporaci\u00f3n de la CI, y luego van automatizando la distribuci\u00f3n y la implementaci\u00f3n, por ejemplo, con las aplicaciones desarrolladas directamente en la nube.</p>"},{"location":"#integracion-continua","title":"Integraci\u00f3n continua","text":"<p>El objetivo del dise\u00f1o de las aplicaciones modernas es que los desarrolladores puedan trabajar de forma simult\u00e1nea en distintas funciones de la misma aplicaci\u00f3n. Sin embargo, si una empresa fusiona todo el c\u00f3digo fuente diversificado en un solo d\u00eda (conocido como el \"d\u00eda de la fusi\u00f3n\"), las tareas pueden tornarse tediosas, manuales y muy lentas. Esto se debe a que si un desarrollador que trabaja de forma aislada implementa un cambio en una aplicaci\u00f3n, existe la posibilidad de que entre en conflicto con las modificaciones que otros desarrolladores implementaron al mismo tiempo. El problema puede agravarse a\u00fan m\u00e1s si cada desarrollador personaliza su propio entorno de desarrollo integrado (IDE) local, en lugar de que todo el equipo adopte un IDE basado en la nube.</p> <p> </p> <p>La integraci\u00f3n continua (CI) permite que los desarrolladores incorporen los cambios del c\u00f3digo a un repositorio compartido con mayor frecuencia, o incluso a diario. Una vez que se incorporan las modificaciones del desarrollador, se validan con la compilaci\u00f3n autom\u00e1tica de la aplicaci\u00f3n y la ejecuci\u00f3n de distintas pruebas automatizadas (generalmente, de unidad e integraci\u00f3n), para garantizar que los cambios no hayan introducido una falla. Esto significa que se debe probar todo, desde las clases y el funcionamiento hasta los distintos m\u00f3dulos que conforman toda la aplicaci\u00f3n. Si una prueba autom\u00e1tica detecta un conflicto entre el c\u00f3digo nuevo y el actual, la CI facilita la resoluci\u00f3n de esos errores con rapidez.</p>"},{"location":"#distribucion-continua","title":"Distribuci\u00f3n continua","text":"<p>Despu\u00e9s de la automatizaci\u00f3n de las compilaciones y las pruebas de unidad e integraci\u00f3n de la CI, la distribuci\u00f3n continua automatiza el traslado del c\u00f3digo validado hacia un repositorio. Por eso, para que la distribuci\u00f3n continua sea eficaz, es importante que la CI ya est\u00e9 incorporada al proceso de desarrollo. El objetivo de la distribuci\u00f3n continua es tener una base de c\u00f3digo que pueda implementarse en el entorno de producci\u00f3n en cualquier momento.</p> <p> </p> <p>Cada etapa (desde la incorporaci\u00f3n de los cambios al c\u00f3digo hasta la distribuci\u00f3n de las compilaciones listas para la producci\u00f3n) implica la automatizaci\u00f3n de las pruebas y del lanzamiento del c\u00f3digo. Al final de este proceso, el equipo de operaciones puede implementar una aplicaci\u00f3n para la producci\u00f3n de forma r\u00e1pida y sencilla. Descubra las otras implementaciones que puede automatizar</p>"},{"location":"#implementacion-continua","title":"Implementaci\u00f3n continua","text":"<p>La \u00faltima etapa del canal consolidado de CI/CD es la implementaci\u00f3n continua, que automatiza el lanzamiento de una aplicaci\u00f3n a la producci\u00f3n, ya que es una extensi\u00f3n de la distribuci\u00f3n continua, la cual automatiza el traslado de una compilaci\u00f3n lista para la producci\u00f3n a un repositorio del c\u00f3digo. Debido a que no hay ninguna entrada manual en la etapa anterior a la producci\u00f3n, la implementaci\u00f3n continua depende en gran medida del correcto dise\u00f1o de la automatizaci\u00f3n de las pruebas.</p> <p> </p> <p>En la pr\u00e1ctica, los cambios que implementan los desarrolladores en la aplicaci\u00f3n en la nube podr\u00edan ponerse en marcha unos cuantos minutos despu\u00e9s de su creaci\u00f3n (siempre que hayan pasado las pruebas automatizadas). Esto facilita mucho m\u00e1s la recepci\u00f3n e incorporaci\u00f3n permanente de los comentarios de los usuarios. En conjunto, todas estas pr\u00e1cticas de CI/CD permiten que se implementen las aplicaciones con menos riesgos, ya que es m\u00e1s f\u00e1cil incorporar los cambios en las aplicaciones de a poco, en lugar de hacerlo todo de una sola vez. Sin embargo, tambi\u00e9n deben realizarse muchas inversiones iniciales, ya que se deben dise\u00f1ar las pruebas automatizadas para que se adapten a las distintas etapas de prueba y lanzamiento en el canal de la CI/CD.</p>"},{"location":"#conclusion","title":"Conclusi\u00f3n","text":"<p>Se ha explicado en este tema cu\u00e1les son las caracter\u00edsticas, usos y diferencias entre los servidores web y los servidores de aplicaciones.</p> <p>Tambi\u00e9n hemos explicado detalladamente en qu\u00e9 consiste un proceso de despliegue cl\u00e1sico de una aplicaci\u00f3n web, cu\u00e1les son sus fases y caracter\u00edsticas. Para reforzar este proceso, hemos listado una serie de buenas pr\u00e1cticas a la hora de llevarlo a cabo.</p> <p>Por \u00faltimo, hemos presentado las nuevas tendencias en el mundo del despliegue, como son las t\u00e9cnicas de CI/CD, que abordaremos de forma m\u00e1s profunda en el Tema 7.</p>"},{"location":"#referencias","title":"Referencias","text":"<p>What is an application server? (I)</p> <p>What is an application server? (II)</p> <p>What is deployment in software and web development</p> <p>Simple y r\u00e1pido. Entiende qu\u00e9 es Maven en menos de 10 min.</p> <p>Maven in 5 Minutes</p> <p>T\u00edtulo de experto universitario en desarrollo de aplicaciones y servicios con JavaEE</p> <p>Qu\u00e9 es Node.js y por qu\u00e9 deber\u00eda usarlo</p> <p>\u00bfQu\u00e9 son la integraci\u00f3n y la distribuci\u00f3n continuas (CI/CD)?</p>"},{"location":"practica1_Tomcat/","title":"Pr\u00e1ctica 3.1: Instalaci\u00f3n de Tomcat","text":"<p>Atenci\u00f3n</p> <p>Estos apuntes siguen aqu\u00ed para temas de consulta pero a d\u00eda de hoy tiene ciertas partes que pueden haberse quedado obsoletas (Heroku por ejemplo ahora es de pago), los ir\u00e9 actualizando en la medida que el tiempo me lo permita en esta nueva p\u00e1gina.</p>"},{"location":"practica1_Tomcat/#introduccion","title":"Introducci\u00f3n","text":"<p>Si consultamos el apartado de versiones de Tomcat en su p\u00e1gina oficial, nos daremos cuenta de que no vamos a usar la \u00faltima versi\u00f3n, la 10, para esta pr\u00e1ctica, sino la anterior, la 9. La pregunta es casi inevitable:</p>"},{"location":"practica1_Tomcat/#por-que","title":"\u00bfPor qu\u00e9?","text":"<p>En el enlace anterior vemos como desde su versi\u00f3n 9, Tomcat da soporta a Java 8 y superiores. Sin embargo, a partir de la versi\u00f3n 10.1.x, da soporte a Java 11 y superiores.</p>"},{"location":"practica1_Tomcat/#que-significa-esto","title":"\u00bfQu\u00e9 significa esto?","text":"<p>En Java 9 se introdujeron novedades como un nuevo sistema de m\u00f3dulos (Jigsaw), entre otras.</p> <p>En Java 11 se dio un paso m\u00e1s al haber renombrado completamente las rutas de paquetes javax. a jakarta.. Oracle, a pesar de haber hecho p\u00fablico el desarrollo de Java, no hizo lo mismo con su nombre.</p> <p>As\u00ed las cosas, resulta que Java 8 puede que a d\u00eda de hoy a\u00fan sea la m\u00e1s usada en proyectos reales. Dicho esto, podr\u00eda realizarse un proceso de migraci\u00f3n de un proyecto de Java 8 a Java 11 y utilizarlo en Tomcat 10.</p> <p>No obstante, para Java 8 su soporte para uso comercial (pagando) acab\u00f3 en Marzo de 2022, pero para uso no comercial sigue hasta 2030.</p> <p>En conclusi\u00f3n, no es raro encontrarse en el mundo real un proyecto a desplegar realizado en Java 8. Podr\u00eda realizarse una migraci\u00f3n y los conceptos de despliegue que veremos seguir\u00edan aplicando. As\u00ed las cosas, por facilidad en la realizaci\u00f3n de las pr\u00e1cticas utilizaremos Tomcat 9 y el plugin oficial de Maven para Tomcat 7 para el despliegue (luego veremos el motivo).</p>"},{"location":"practica1_Tomcat/#instalacion-de-tomcat","title":"Instalaci\u00f3n de Tomcat","text":"<p>Esta pr\u00e1ctica es muy sencilla y va a consistir en realizar la instalaci\u00f3n del servidor de aplicaciones Tomcat 9, en una m\u00e1quina virtual corriendo Debian 11 Bullseye.</p> <p></p> <p>Se puede hacer tanto con el administrador de paquetes <code>apt</code> como de forma manual. La forma m\u00e1s recomendable por su sencillez es la primera.</p> <p>Para ello, y como sugerencia, pod\u00e9is apoyaros en este tutorial online, aunque s\u00f3is libres de consultar tantas fuentes como dese\u00e9is.</p> <p>Obviamente, deb\u00e9is utilizar vuestro propios usuarios y contrase\u00f1a.</p>"},{"location":"practica1_Tomcat/#despliegue-manual-mediante-la-gui-de-administracion","title":"Despliegue manual mediante la GUI de administraci\u00f3n","text":"<p>Realizaremos el despliegue manual de una aplicaci\u00f3n ya previamente empaquetada en formato WAR. Para ello:</p> <ol> <li> <p>Nos logueamos con el usuario previamente creado.</p> </li> <li> <p>Buscamos la secci\u00f3n que nos permite desplegar un WAR manualmente, seleccionamos nuestro archivo y lo desplegamos.</p> </li> </ol> <p></p> <p>Tras estos pasos, se nos listar\u00e1 la aplicaci\u00f3n ya desplegada como un directorio m\u00e1s y podremos acceder a ella.</p> <p>Task</p> <p>Documenta el despliegue manual de la aplicaci\u00f3n que os pod\u00e9is descargar para tal efecto en Aules (archivo .war).</p>"},{"location":"practica1_Tomcat/#despliegue-con-maven","title":"Despliegue con Maven","text":""},{"location":"practica1_Tomcat/#instalacion-de-maven","title":"Instalaci\u00f3n de Maven","text":"<p>Para instalar Maven en nuestro Debian tenemos, de nuevo, dos opciones:</p> <ul> <li>Instalaci\u00f3n mediante gestor de paquetes APT</li> <li>Instalaci\u00f3n manual</li> </ul> <p>La primera, recomendada, es mucho m\u00e1s sencilla y automatizada (establece todos los paths y variables de entorno), aunque con la segunda se podr\u00eda conseguir un paquete m\u00e1s actualizado.</p> <p>Ambos m\u00e9todos vienen explicados aqu\u00ed</p> <p>Si decidimos seguir el primer m\u00e9todo, el m\u00e1s sencillo, vemos que es tan simple como actualizar los repositorios:</p> <p><code>sudo apt update</code></p> <p>E instalar Maven</p> <p><code>sudo apt install maven</code></p> <p>Para comprobar que todo ha ido correctamente, podemos ver la versi\u00f3n instalada de Maven:</p> <p><code>mvn --v</code></p>"},{"location":"practica1_Tomcat/#configuracion-de-maven","title":"Configuraci\u00f3n de Maven","text":"<p>Para poder realizar despliegues en nuestro Tomcat previamente instalado, necesitamos realizar la configuraci\u00f3n adecuada para Maven. Ya sabemos que esto en Linux significa editar los archivos de configuraci\u00f3n adecuados. Vamos a ello.</p> <ol> <li>En primer lugar necesitamos asegurarnos de que en el apartado anterior de la pr\u00e1ctica hemos a\u00f1adido todos los usuarios necesarios, as\u00ed como sus respectivos roles. Debemos a\u00f1adir el rol de <code>manager-script</code> para permitir que Maven se autentique contra Tomcat y pueda realizar el despliegue.</li> </ol> <p>Los roles utilizados por Tomcat vienen detallados en su documentaci\u00f3n, que merece ser consultada:</p> <p></p> <p>En dicha documentaci\u00f3n se nos indica que, por temas de seguridad, es recomendable no otorgar los roles de manager-script o manager-jmx al mismo usuario que tenga el rol de manager-gui.</p> <p>Info</p> <p>Tendremos dos usuarios, uno para la GUI y otro exclusivamente para hacer los deploys de Maven.</p> <p>As\u00ed las cosas, modificamos el <code>archivo /etc/tomcat9/tomcat-users.xml</code> acorde a nuestras necesidades (los nombres de usuario y contrase\u00f1a deber\u00e1n ser los que elij\u00e1is para vosotros):</p> <p></p> <ol> <li>Editar el archivo <code>/etc/maven/settings.xml</code> para indicarle a Maven, un identificador para el servidor sobre el que vamos a desplegar (no es m\u00e1s que un nombre, ponedle el nombre que consider\u00e9is), as\u00ed como las credenciales. Todo esto se har\u00e1 dentro del bloque servers del XML:</li> </ol> <p></p> <ol> <li>Ahora debemos modificar el <code>POM</code> del proyecto para que haga referencia a que el despliegue se realice con el plugin de Maven para Tomcat.</li> </ol> <p>Info</p> <p>No existen plugins oficiales para Tomcat m\u00e1s all\u00e1 de la versi\u00f3n 7 del servidor. No obstante, el plugin para Tomcat 7 sigue funcionando correctamente con Tomcat 9.</p> <p>Otra opci\u00f3n ser\u00eda utilizar el plugin Cargo</p> <p></p> <p>Donde lo que a\u00f1adimos es el bloque</p> <pre><code>&lt;build&gt;\n        &lt;finalName&gt;war-deploy&lt;/finalName&gt; #\n        &lt;plugins&gt; \n        &lt;plugin&gt;\n        &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;\n        &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;2.2&lt;/version&gt;\n        &lt;configuration&gt;\n            &lt;url&gt;http://localhost:8080/manager/text&lt;/url&gt; #\n            &lt;server&gt;Tomcat.P.3.1&lt;/server&gt; #\n            &lt;path&gt;/myapp&lt;/path&gt; #\n        &lt;/configuration&gt;\n        &lt;/plugin&gt;\n        &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre>"},{"location":"practica1_Tomcat/#despliegue","title":"Despliegue","text":"<p>Teniendo ya todo listo para realizar despliegues, ahora crearemos una aplicaci\u00f3n Java de prueba para ver si podemos desplegarla sobre la arquitectura que hemos montado. Para ello utilizamos el comando:</p> <pre><code>    mvn archetype:generate -DgroupId=raul -DartifactId=war-deploy -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false\n</code></pre> <p>Pod\u00e9is sustituir los valores de <code>groupID</code> y <code>artifactId</code> (este ser\u00e1 el nombre de la aplicaci\u00f3n) por lo que quer\u00e1is.</p> <p>Tras generar esta aplicaci\u00f3n, los comandos finales que se utilizan en Maven para desplegar, volver a desplegar o desplegar una aplicaci\u00f3n, son:</p> <ul> <li><code>mvn tomcat7:deploy</code></li> <li><code>mvn tomcat7:redeploy</code></li> <li><code>mvn tomcat7:undeploy</code></li> </ul> <p>As\u00ed pues, tras el despliegue con Maven nos indicar\u00e1 que todo ha ido correctamente con un mensaje de <code>BUILD SUCCESS</code>, tal que as\u00ed:</p> <p></p> <p>Y, accediendo a trav\u00e9s de la GUI, debemos ver que la aplicaci\u00f3n est\u00e1 desplegado y que podemos acceder a ella perfectamente:</p> <p></p>"},{"location":"practica1_Tomcat/#tarea","title":"TAREA","text":"<p>Realizar el despliegue con la aplicaci\u00f3n de prueba.</p> <p>Repetir el despliegue pero esta vez con otra aplicaci\u00f3n que no es la de prueba. M\u00e1s adelante ya hablaremos de <code>git</code> pero de momento, usaremos los comandos que veremos a continuaci\u00f3n.</p> <p>Nos clonamos el repositorio:</p> <p><code>git clone https://github.com/cameronmcnz/rock-paper-scissors.git</code></p> <p> Nos situamos dentro de \u00e9l:</p> <p><code>cd rock-paper-scissors</code></p> <p>Y cambiamos de rama:</p> <p><code>git checkout patch-1</code></p> <p></p> <p>Tras esto debemos proceder exactamente igual que en el caso anterior, con la ventaja de que ya tenemos configurados los usuarios de Tomcat y los par\u00e1metros de Maven.</p> <p>As\u00ed pues, s\u00f3lo habr\u00eda que a\u00f1adir el bloque <code>&lt;plugin&gt;...&lt;/plugin&gt;</code> adecuado para poder hacer nuestro despliegue.</p> <pre><code>&lt;plugin&gt;\n    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n    &lt;artifactId&gt;tomcat-maven-plugin&lt;/artifactId&gt;\n    &lt;version&gt;1.1&lt;/version&gt;\n    &lt;configuration&gt;\n        &lt;url&gt;http://localhost:8080/manager/text&lt;/url&gt; #\n        &lt;server&gt;tomcat&lt;/server&gt;\n        &lt;path&gt;/rock-paper-scissors&lt;/path&gt;\n    &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre> <p></p> <p>Task</p> <p>Documenta, incluyendo capturas de pantallas, el proceso que has seguido para realizar el despliegue de esta nueva aplicaci\u00f3n, as\u00ed como el resultado final.</p>"},{"location":"practica1_Tomcat/#resultados","title":"Resultados","text":"<p>Info</p> <p>Si se hace desde la misma maquina que las pr\u00e1cticas de Nginx, primero debemos de cambiar el puerto en el documento /etc/tomcat10/server.xml porque no puede compartir puerto con nginx ya que crea conflicto.</p> <p>Debemos buscar una l\u00ednea que define el puerto conector. Algo como:</p> <p><code>&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\"     connectionTimeout=\"20000\"     redirectPort=\"8443\" /&gt;</code></p>"},{"location":"practica1_Tomcat/#cuestiones","title":"Cuestiones","text":"<p>Hab\u00e9is visto que los archivos de configuraci\u00f3n que hemos tocado contienen contrase\u00f1as en texto plano, por lo que cualquiera con acceso a ellos obtendr\u00eda las credenciales de nuestras herramientas.</p> <p>En principio esto representa un gran riesgo de seguridad, \u00bfsabr\u00edas razonar o averig\u00fcar por qu\u00e9 esto est\u00e1 dise\u00f1ado de esta forma?</p> <ol> <li>Se hace as\u00ed para simplicar la configuraci\u00f3n y el despliegue de Tomcat, incluso para administradores con poca experiencia.</li> <li>Evita la necesidad de integrar mecanismos de cifrado o gesti\u00f3n de claves</li> <li>Facilita la edici\u00f3n y transferencia de configuraciones entre entornos sin requerir procesos adicionales</li> <li>Garantiza que cualquier sistema o librer\u00eda que interact\u00fae con Tomcat puede autenticar sin depender de herramientas adicionales para descifrar las claves.</li> <li>Conf\u00eda en la configuraci\u00f3n adecuada de permisos del sistema operativo</li> <li>Se espera que los administradores restrinjan el acceso f\u00edsica o remoto al servidor.</li> </ol>"},{"location":"practica1_Tomcat/#referencias","title":"Referencias","text":"<p>Tutorial Tomcat I</p> <p>Tutorial Tomcat II</p> <p>Tutorial Tomcat para Ubuntu</p> <p>Instalaci\u00f3n Maven</p> <p>JSF 3.0 en Tomcat 10 con Java 11</p> <p>Migraci\u00f3n de Java 8 a Java 11</p> <p>Install and configure jdk11 + Tomcat + Maven under Linux system</p> <p>Step-by-step Maven Tomcat WAR file deploy example</p> <p>How to deploy the java application to Tomcat 9 webserver using Maven</p> <p>How to Install Apache Maven on Debian 11 Bullseye</p> <p>How to Deploy a WAR File to Tomcat</p> <p>Migrate Maven Projects to Java 11</p> <p>How to configure Tomcat 9.0 in Maven</p> <p>Github: cameronmcnz/rock-paper-scissors</p> <p>Why are plain text passwords in the config files?</p> <p>How to avoid storing passwords in the clear for tomcat's server.xml Resource definition of a DataSource?</p>"},{"location":"practica1_Tomcat/#documentacion","title":"Documentaci\u00f3n","text":""},{"location":"practica1_Tomcat/#instalacion-tomcat9","title":"Instalaci\u00f3n TOMCAT9","text":"<p>Abrimos el puerto 8082</p> <p></p> <p>Actualizamos los repositorios</p> <p></p> <p>Instalamos Java usando apt</p> <p></p> <p>Instalamos Tomcat9</p> <p></p> <p>Creamos el grupo y usuario tomcat9</p> <p></p> <p>Iniciamos y comprobamos el estado de tomcat9</p> <p></p> <p>Editamos los roles de los usuarios con el comando <code>sudo nano /etc/tomcat9/tomcat-users.xml</code></p> <p></p> <p>Instalamos el manager y el host manager de tomcat9</p> <p></p> <p>Comprobamos que podamos acceder a la web http://localhost:8080/manager/html introduciendo nuestras credenciales configuradas en el paso anterior.</p> <p></p> <p>Accedemos al host-manager para comprobar que tenemos acceso</p> <p></p> <p>Accedemos a la url Apache Tomcat y seleccionamos la opci\u00f3n de tar.gz del apartado Core</p> <p></p> <p>Creamos el directorio /opt/tomcat</p> <p></p> <p>Extraemos Tomcat: - Para ello debemos ir al directorio donde se encuentra el archivo <code>apache-tomcat-*.tar.gz</code>. Como en mi caso est\u00e1 en el directorio ~/ lo puedo hacer ah\u00ed mismo. </p> <pre><code>![Extracci\u00f3n Tomcat](assets/imagenes/practicas/Tomcat/image-35.png)\n</code></pre> <p>Movemos el contenido extraido a /opt/tomcat</p> <p></p> <p>A\u00f1adimos el grupo y usuario tomcat</p> <p></p> <p>Damos permisos recursivos al usuario y grupo creados</p> <p></p> <p>Obtenemos la ruta del paquete Java que instalamos en los primeros pasos con el comando <code>sudo update-java-alternatives -l</code></p> <p></p> <p>Y la copiamos</p> <p>Abrimos el archivo de configuraci\u00f3n de Tomcat con el comando <code>sudo nano /etc/systemd/system/tomcat.service</code>.</p> <p>Pegamos el siguiente path y en la parte de <code>Enviroment=JAVA_HOME=</code> cambiamos la url que pone por la de la ruta del paquete Java que hemos copiado anteriormente</p> <p>Dentro de ese archivo copie el path:</p> <pre><code>[Unit]\nDescription=Apache Tomcat\nWants=network.target\nAfter=network.target\n\n[Service]\nType=forking\n\nEnvironment=JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64/\n\nEnvironment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid\nEnvironment=CATALINA_HOME=/opt/tomcat\n\nEnvironment='CATALINA_OPTS=-Xms512M -Xmx1G -Djava.net.preferIPv4Stack=true'\nEnvironment='JAVA_OPTS=-Djava.awt.headless=true'\n\nExecStart=/opt/tomcat/bin/startup.sh\nExecStop=/opt/tomcat/bin/shutdown.sh\nSuccessExitStatus=143\n\nUser=tomcat\nGroup=tomcat\nUMask=0007\nRestartSec=10\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p></p> <p>Otorgamos permisos de ejecuci\u00f3n a todos los scripts con el comando <code>sudo bash -c \"chmod +x /opt/tomcat/bin/*.sh\"</code></p> <p></p> <p>Habilitamos el servicio tomcat con el comando <code>sudo system enable tomcat</code></p> <p></p> <p>Agregamos un usuario de Tomcat al archivo de configuraci\u00f3n</p> <p></p> <p>Copiamos el siguiente c\u00f3digo y remplazamos linuxhint con el nombre de usuario que quieras definir y cambia la contrase\u00f1a donde dice YourPasswordHere</p> <pre><code>&lt;role rolename=\"admin\"/&gt;\n&lt;role rolename=\"admin-gui\"/&gt;\n&lt;role rolename=\"manager\"/&gt;\n&lt;role rolename=\"manager-gui\"/&gt;\n\n&lt;user username=\"linuxhint\" password=\"YourPasswordHere\" roles=\"admin,admin-gui,manager,manager-gui\"/&gt;\n</code></pre> <p></p> <p>Edita el archivo de configuraci\u00f3n con el comando <code>sudo nano /opt/tomcat/webapps/manager/META-INF/context.xml</code> y comenta la l\u00ednea </p> <pre><code>&lt;Valve className=\"org.apache.catalina.valves.RemoteAddrValve\"\nallow=\"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /&gt;\n</code></pre> <pre><code>&lt;!-- &lt;Valve className=\"org.apache.catalina.valves.RemoteAddrValve\"\nallow=\"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /&gt; --&gt;\n</code></pre> <p></p> <p>Reinicia Tomcat</p> <p></p> <p>Vamos a http://localhost:8080/manager</p> <p></p> <p>Desplegamos un archivo .war</p> <p></p> <p>Vamos a http://localhost:8080/EjemploPruebaCarga (O el nombre que tenga tu .war) y se deber\u00eda de haber cargado el script que hemos exportado</p> <p></p>"},{"location":"practica1_Tomcat/#instalacion-de-maven_1","title":"Instalaci\u00f3n de Maven","text":"<p>Actualizamos los repositorios e instalamos Maven</p> <p></p> <p>Para comprobar que todo ha ido correctamente vemos la versi\u00f3n instalada con el comando <code>mvn --v</code></p> <p></p>"},{"location":"practica1_Tomcat/#configuracion","title":"Configuraci\u00f3n","text":"<p>A\u00f1adimos el rol de <code>manager-script</code> a la configuraci\u00f3n de los usuarios de tomcat en el archivo <code>/etc/tomcat9/tomcat-users.xml</code></p> <p></p> <p>Editamos el archivo <code>/etc/maven/settings.xml</code></p> <p>A\u00f1adimos nuestro nombre, el nombre de la pr\u00e1ctica y una contrase\u00f1a a nuestra elecci\u00f3n</p> <p></p> <p>Modificamos el <code>POM</code></p> <ul> <li> <p>Primero creamos un nuevo proyecto Maven</p> <p></p> </li> <li> <p>Si todo ha ido bien nos mostrar\u00e1 un mensaje de BUILD SUCCESS</p> <p></p> </li> <li> <p>Vamos a la carpeta que se nos ha creado y abrimos el archivo <code>pom.xml</code></p> <p></p> </li> <li> <p>A\u00f1adimos el bloque </p> </li> </ul> <pre><code>&lt;build&gt;\n        &lt;finalName&gt;war-deploy&lt;/finalName&gt; #\n        &lt;plugins&gt; \n        &lt;plugin&gt;\n        &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;\n        &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;\n        &lt;version&gt;2.2&lt;/version&gt;\n        &lt;configuration&gt;\n            &lt;url&gt;http://localhost:8080/manager/text&lt;/url&gt; #\n            &lt;server&gt;Tomcat.P.3.1&lt;/server&gt;  -&gt; Aqu\u00ed va el server que has configurado en el archivo settings.xml\n            &lt;path&gt;/myapp&lt;/path&gt;  -&gt; Aqu\u00ed viene el directorio donde se encuentra el archivo pom.xml\n        &lt;/configuration&gt;\n        &lt;/plugin&gt;\n        &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre>"},{"location":"practica1_Tomcat/#resultado","title":"Resultado","text":"<p>Si entramos en http://localhost:8080/manager tendr\u00eda que mostrarse el apartado de que se ha creado nuestra web EjemploPruebaCarga.</p> <p></p>"},{"location":"practica2_NodeExpress/","title":"Pr\u00e1ctica 3.2: Despliegue de aplicaciones con Node Express","text":""},{"location":"practica2_NodeExpress/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta pr\u00e1ctica vamos a realizar el despliegue de aplicaciones Node.js sobre un servidor Node Express. Lo curioso de este caso es que el despliegue aqu\u00ed cambia un poco puesto que no se hace sobre el servidor, sino que la aplicaci\u00f3n es el servidor.</p> <p>Warning</p> <p>Comprueba que el servidor Tomcat de pr\u00e1cticas anteriores no est\u00e1 corriendo o nos dar\u00e1 problemas:</p> <p><code>sudo systemctl status tomcat9</code></p> <p>Y en caso de salir activo, pararlo:</p> <p><code>sudo systemctl stop tomcat9</code></p> <p>En mi caso, como est\u00e1 activa por la pr\u00e1ctica anterior, lo he tenido que pararlo.</p> <p></p>"},{"location":"practica2_NodeExpress/#instalacion-de-nodejs-express-y-test-de-la-primera-aplicacion","title":"Instalaci\u00f3n de Node.js, Express y test de la primera aplicaci\u00f3n","text":"<p>La primera parte de la pr\u00e1ctica es muy sencilla. Consistir\u00e1 en instalar sobre nuestra Debian 11 tanto Node.js como Express y tras ello crear un archivo <code>.js</code> de prueba para comprobar que nuestro primer despliegue funciona correctamente.</p> <p>Para ello, os pod\u00e9is apoyar en este sencillo tutorial o este otro, y para Express:</p> <p>Bas\u00e1ndome en el primer tutorial, la instalaci\u00f3n ser\u00eda tal que as\u00ed:</p>"},{"location":"practica2_NodeExpress/#instalacion-nodejs","title":"Instalaci\u00f3n NodeJS","text":"<ol> <li>Actualizar el sistema con los comandos <code>sudo apt update</code> y <code>sudo apt upgrade</code></li> </ol> <ol> <li>Agregar el repositorio de Node.js con el comando <code>curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -</code></li> </ol> <ol> <li>Instalamos Node.js <code>sudo apt install nodejs</code> y para verificar la instalaci\u00f3n hacemos <code>node --version</code> y <code>npm --version</code> que nos tendr\u00e1n que dar como resultado v16.20.2 y 8.19.4 respectivamente o mejor.</li> </ol>"},{"location":"practica2_NodeExpress/#instalacion-expressjs","title":"Instalaci\u00f3n ExpressJS","text":"<ol> <li>Primero instalamos Express.js de forma global con el comando <code>sudo npm install -g express</code></li> </ol> <ol> <li>Creamos una carpeta para el proyecto con los comandos <code>mkdir proyecto</code> y <code>cd proyecto</code> para ubicarnos en el</li> </ol> <ol> <li>Inicializamos el proyecto con el comando <code>npm init -y</code></li> </ol> <ol> <li>Procedemos a instalar Express.js de forma local con <code>npm install express</code></li> </ol>"},{"location":"practica2_NodeExpress/#crear-una-aplicacion-con-expressjs","title":"Crear una aplicaci\u00f3n con Express.js","text":"<ol> <li>Crear un archivo para la aplicaci\u00f3n  con el comando <code>sudo nano app.js</code> </li> </ol> <ol> <li>Le a\u00f1adimos el siguiente c\u00f3digo</li> </ol> <pre><code>const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) =&gt; {\n    res.send('Hello. Welcome to this blog')\n})\n\napp.listen(port, () =&gt; {\n    console.log(`Example app listening at http://localhost:${port}`)\n})\n</code></pre> <ol> <li>Ejecutamos la aplicaci\u00f3n con el comando <code>node app.js</code></li> </ol> <ol> <li>Si abrimos un navegador y visitamos http://vuestra-IP:3000 podremos ver la siguiente ventana</li> </ol> <p>En lugar de acceder a <code>http://localhost:3000</code>, deb\u00e9is acceder desde vuestra m\u00e1quina local a <code>http://IP-maq-virtual:3000</code>, utilizando la IP concreta de vuestra m\u00e1quina virtual.</p> <p>Recordatorio</p> <p>Deb\u00e9is a\u00f1adir a vuestro grupo de seguridad el puerto que est\u00e9is utilizando para acceder a la aplicaci\u00f3n (3000 u otro), permitiendo el tr\u00e1fico de entrada hacia ese puerto TCP.</p> <p>Recordad parar el servidor (CTRL+C) al acabar la pr\u00e1ctica.</p> <p>Task</p> <p>Documenta, incluyendo capturas de pantallas, el proceso que has seguido para realizar el despliegue de esta nueva aplicaci\u00f3n, as\u00ed como el resultado final.</p>"},{"location":"practica2_NodeExpress/#despliegue-de-una-nueva-aplicacion","title":"Despliegue de una nueva aplicaci\u00f3n","text":"<p>Vamos ahora a realizar el despliegue de una aplicaci\u00f3n de terceros para ver c\u00f3mo es el proceso.</p> <p>Se trata de un \"prototipo\" de una aplicaci\u00f3n de predicci\u00f3n meteorol\u00f3gica que pod\u00e9is encontrar en este repositorio de Github.</p> <p>Tal y como indican las instrucciones del propio repositorio, los pasos a seguir son, en primer lugar, clonar el repositorio a nuesta m\u00e1quina:</p> <p><code>git clone https://github.com/MehedilslamRipon/Shopping-Cart-Application</code></p> <p></p> <p>Movernos al nuevo directorio:</p> <p><code>cd Shopping-Cart-Application/</code></p> <p></p> <p>Instalar las librer\u00edas necesarias (paciencia, este proceso puede tardar un buen rato):</p> <p><code>npm install</code></p> <p></p> <p>Y, por \u00faltimo, iniciar la aplicaci\u00f3n:</p> <p><code>npm run start</code></p> <p></p> <p>Cuando sig\u00e1is el proceso necesario e intent\u00e9is iniciar la aplicaci\u00f3n con Express, os dar\u00e1 un error del tipo:</p> <p><code>sh: 1: nodemon: not found</code></p> <p>Tarea</p> <p>Buscad c\u00f3mo solucionar este problema y, tras ello, iniciad la aplicaci\u00f3n sin problemas.</p> <p>\u00bfQu\u00e9 comando hab\u00e9is usado para solucionar el fallo anterior?\u00bfCu\u00e1l es su cometido?\u00bfQu\u00e9 archivo se ha modificado al ejecutarlo? Docum\u00e9ntalo todo en el informe de la pr\u00e1ctica.</p> <p>El error indica que el script requiere nodemon que se instala cuando lo instalamos de forma global primero. Para arreglarlo debemos:</p> <ol> <li>Instalar nodemon global con el comando <code>sudo npm install -g nodemon</code></li> </ol> <p></p> <ol> <li>Una vez instalamos, verificamos que se ha instalado correctamente comprovando la versi\u00f3n instalada</li> </ol> <p></p> <ol> <li>Una vez hecho esto, si volvemos a ejecutar el comando <code>npm run start</code> </li> </ol> <p></p> <ol> <li>Si todo est\u00e1 correcto se mostrar\u00e1 el siguiente mensaje en http://vuestra-ip:3000</li> </ol> <p></p> <p>Todo esto se pudo hacer ya que al instalar nodemon como dependencia, el archivo <code>package.json</code> se modific\u00f3 en la secci\u00f3n <code>\"dependencies\"</code> a\u00f1adiendo distintas dependencias necesarias para que la aplicaci\u00f3n funcione.  - <code>cors</code> --&gt; Lo que hace es manejar las pol\u00edticas de recursos compratidos entre or\u00edgenes, facilitando que un servidor permita solicitudes desde diferentes dominios. - <code>ejs</code> --&gt; Motor de plantillas para renderizar visitas HTML din\u00e1micas - <code>express</code> --&gt; Es un framework minimalista de Node.js para manejar rutas, solicitudes, respuestas...</p> <pre><code>\"dependencies\": {\n   \"cors\": \"^2.8.5\",\n   \"ejs\": \"^3.1.5\",\n   \"express\": \"^4.17.1\"\n}\n</code></pre> <p>Tarea</p> <p>Documenta, incluyendo capturas de pantallas, el proceso que has seguido para realizar el despliegue de esta nueva aplicaci\u00f3n, as\u00ed como el resultado final.</p>"},{"location":"practica2_NodeExpress/#cuestiones","title":"Cuestiones","text":"<p>Cuando ejecut\u00e1is el comando <code>npm run start</code>, lo que est\u00e1is haciendo es ejecutar un script:</p> <ul> <li>\u00bfDonde podemos ver que script se est\u00e1 ejecutando?</li> </ul> <p>Podemos ver el script que se ejecuta dentro del archivo <code>package.json</code> en la secci\u00f3n <code>\"scripts\"</code>.</p> <p></p> <ul> <li>\u00bfQu\u00e9 comando est\u00e1 ejecutando?</li> </ul> <p>En el script <code>start</code> del apartado <code>\"scripts\"</code> se ejecuta el comando <code>nodemon src/index.js</code> que lo que hace es iniciar el archvio principal de la aplicaci\u00f3n y utiliza nodemon para reiniciar autom\u00e1ticamente el servidor cuando detecta cambios en archivos del proyecto.</p> <p>Como ayuda, pod\u00e9is consultar esta informaci\u00f3n.</p>"},{"location":"practica2_NodeExpress/#referencias","title":"Referencias","text":"<p>How to install ExpressJS on Debian 11?</p>"},{"location":"practica3_PaaS/","title":"Pr\u00e1ctica 3.3: Despliegue de una aplicaci\u00f3n una aplicaci\u00f3n React en Netlify (PaaS)","text":""},{"location":"practica3_PaaS/#introduccion","title":"Introducci\u00f3n","text":"<p>En la pr\u00e1ctica anterior hemos visto c\u00f3mo desplegar una aplicaci\u00f3n de Node.js sobre un servidor Express en local (en nuestro propio servidor Debian).</p> <p>La pr\u00e1ctica anterior podr\u00eda asemejarse a las pruebas que realiza un desarrollador antes de pasar su aplicaci\u00f3n al entorno de producci\u00f3n.</p> <p>Ya sabemos que entendemos el despliegue o deployment como el proceso de mover nuestro c\u00f3digo t\u00edpicamente de un sistema de control de versiones a una plataforma de hosting donde se aloja y es servida a los usuarios finales.</p> <p>A la hora de desplegar la aplicaci\u00f3n en producci\u00f3n, podr\u00eda utilizarse el m\u00e9todo de copiar los archivos al servidor concreto v\u00eda el vetusto FTP, SSH u otros y desplegarla para dejarla funcionando. No obstante, esta pr\u00e1ctica se acerca m\u00e1s a la realidad ya que utilizaremos un repositorio de Github y una plataforma de PaaS (Platform as a Service) como Netlify para desplegar adecuadamente nuestra aplicaci\u00f3n en producci\u00f3n.</p>"},{"location":"practica3_PaaS/#que-es-github","title":"\u00bfQu\u00e9 es Github?","text":"<p>A pesar de que trataremos un poco m\u00e1s en profundidad Github en el siguiente tema, daremos una breve explicaci\u00f3n aqu\u00ed.</p> <p>GitHub es un servicio basado en la nube que aloja un sistema de control de versiones (VCS) llamado Git. \u00c9ste permite a los desarrolladores colaborar y realizar cambios en proyectos compartidos, a la vez que mantienen un seguimiento detallado de su progreso.</p> <p></p> <p>El control de versiones es un sistema que ayuda a rastrear y gestionar los cambios realizados en un archivo o conjunto de archivos. Utilizado principalmente por ingenieros de software para hacer un seguimiento de las modificaciones realizadas en el c\u00f3digo fuente, el sistema de control de versiones les permite analizar todos los cambios y revertirlos sin repercusiones si se comete un error.</p>"},{"location":"practica3_PaaS/#que-es-netlify","title":"\u00bfQu\u00e9 es Netlify?","text":"<p>Netlify es un proveedor de alojamiento en la nube que proporciona servicios de backend sin servidor (serverless) para sitios web est\u00e1ticos. Est\u00e1 dise\u00f1ado para maximizar la productividad en el sentido de que permite a los desarrolladores (especialmente orientados al frontend), y a los ingenieros construir, probar y desplegar r\u00e1pidamente sitios web/aplicaciones.</p> <p>Funciona conect\u00e1ndose a un repositorio de GitHub, de donde extrae el c\u00f3digo fuente. A continuaci\u00f3n, ejecutar\u00e1 un proceso de construcci\u00f3n para pre-renderizar las p\u00e1ginas de nuestro sitio web/aplicaci\u00f3n en archivos est\u00e1ticos.</p> <p></p> <p>Hay numerosas razones a favor de usar Netlify, aqu\u00ed est\u00e1n algunas de ellas:</p> <ul> <li>Netlify hace que sea incre\u00edblemente sencillo desplegar un sitio web - de hecho, la forma m\u00e1s sencilla de lograrlo es utilizar GitHub, GitLab o Bitbucket para configurar el despliegue continuo.</li> <li>Netlify hace que sea s\u00faper f\u00e1cil lanzar un sitio web con su soluci\u00f3n de gesti\u00f3n de DNS incorporada.</li> <li>Podr\u00edamos desplegar f\u00e1cilmente s\u00f3lo una rama espec\u00edfica de nuestro proyecto Git - esto es \u00fatil para probar nuevas caracter\u00edsticas que pueden o no llegar a la rama maestra/principal, o para determinar r\u00e1pidamente c\u00f3mo un PR (Pull Request) afectar\u00e1 a su sitio.</li> <li>Netlify te permite previsualizar cualquier despliegue que hagas o quieras hacer - esto te permite a ti y a tu equipo ver c\u00f3mo se ver\u00e1n los cambios en producci\u00f3n sin tener que desplegarlos en tu sitio existente.</li> <li>Netlify proporciona una pr\u00e1ctica funci\u00f3n de env\u00edo de formularios que nos permite recoger informaci\u00f3n de los usuarios.</li> </ul> <p>Note</p> <pre><code>Tanto Github, como Netlify, como otras diferentes alternativas, pueden ser controlados desde el terminal de nuestro Linux, por lo que seguiremos el procedimiento de contectarnos v\u00eda SSH a nuestro Debian y realizar las operaciones por terminal.\n</code></pre>"},{"location":"practica3_PaaS/#creacion-de-nuestra-aplicacion","title":"Creaci\u00f3n de nuestra aplicaci\u00f3n","text":"<p>Tras loguearnos por SSH en nuestro Debian, nos crearemos un directorio para albergar la aplicaci\u00f3n con el nombre que queramos. En ese directorio, crearemos los 3 archivos (dos .html y un .js)que conformar\u00e1n nuestra sencilla aplicaci\u00f3n de ejemplo:</p> <p></p> <p>head.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n        &lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n        &lt;h1&gt;Esta es la pagina principal&lt;/h1&gt;\n&lt;p&gt;&lt;a href=\"/tailPage\"&gt;Ir a la siguiente pagina&lt;/a&gt;&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <p></p> <p>tail.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n        &lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n        &lt;h1&gt;FUNCIONA&lt;/h1&gt;\n\n&lt;/body&gt;\n</code></pre> <p></p> <p>aplicacion.js</p> <pre><code>var http = require('http');\nvar fs = require('fs'); // para obtener los datos del archivo html\nvar port = process.env.PORT || 8080; \n\nhttp.createServer(function (req, res) {\n    res.writeHead(200, { 'Content-Type': 'text/html' });\n\n    // req.url almacena el path o ruta de la URL\n    var url = req.url;\n    if (url === \"/\") {\n// fs.readFile busca el archivo HTML\n// el primer par\u00e1metro es el path al archivo HTML\n// y el segundo es el callback de la funci\u00f3n\n// si el archivo no se encuentra, la funci\u00f3n devuelve un error\n// si el archivo se encuentra, el contenido del mismo se encuentra en pgres    \n        fs.readFile(\"head.html\", function (err, pgres) {\n            if (err)\n                res.write(\"HEAD.HTML NOT FOUND\");\n            else {\n                // Las siguientes 3 lineas\n                // tienen la funci\u00f3n de enviar el archivo html\n                // y finalizar el proceso de respuesta\n                res.writeHead(200, { 'Content-Type': 'text/html' });\n                res.write(pgres);\n                res.end();\n            }\n        });\n    }\n    else if (url === \"/tailPage\") {\n        fs.readFile(\"tail.html\", function (err, pgres) {\n            if (err)\n                res.write(\"TAIL.HTML NOT FOUND\");\n            else {\n                res.writeHead(200, { 'Content-Type': 'text/html' });\n                res.write(pgres);\n                res.end();\n            }\n        });\n    }\n\n}).listen(port, function () {\n    console.log(\"SERVER STARTED PORT: 8080\");\n});\n</code></pre> <p></p> <p>Ahora, tal y como hacemos siempre a la hora de crear nuestra aplicaci\u00f3n Node.js, con el fin de crear el archivo package.json, utilizaremos en el terminal el comando:</p> <p><code>npm init</code></p> <p></p> <p>Podemos probar que nuestra aplicaci\u00f3n funciona perfectamente en local:</p> <p><code>node aplicacion.js</code></p> <p>Al ejecutar este comando nos indica que el puerto 8080 ya est\u00e1 en uso ya que en una pr\u00e1ctica anterior se le vincul\u00f3 a tomcat. Para resolver esto tenemos que: 1. Ejecutar el comando <code>sudo lsof -i :8080</code> para averiguar el PID del proceso que est\u00e1 usando ese puerto. 2. Detenemos el proceso usando el comando <code>sudo kill -9 &lt;PID&gt;</code>. En mi caso fue <code>sudo kill -9 674</code> y volvemos a ejecutar el comando del paso anterior para asegurarnos de que ya no hay ning\u00fan proceso que utilice ese puerto.</p> <p></p> <ol> <li>Si el error persiste probar a ejecutar <code>sudo systemctl stop tomcat</code></li> <li>Volver a ejecutar <code>node aplicacion.js</code></li> </ol> <p></p> <p>Y tras ello, debemos poder acceder, desde nuestra m\u00e1quina anfitriona a <code>http://IP-maq-virtual:8080</code></p> <p></p> <p>Ya con la aplicaci\u00f3n creada y comprobada, podremos desplegarla en m\u00faltiples plataformas en la nube, como AWS, GCP, Azure, Digital Ocean, Heroku...</p> <p>\u00a1Ojo!</p> <pre><code>Para que nos funcione en la plataforma PaaS, en el archivo package.json que se nos ha creado al hacer el npm init debemos hacerle una modificaci\u00f3n.\n\nEn el bloque scripts, debemos borrar lo que haya dentro y dejar \u00fanicamente dentro de \u00e9l:\n\n`\"start\": \"node aplicacion.js\"`\n\nDe forma que el sitio donde la despleguemos sepa que comando utilizar para iniciar la aplicaci\u00f3n tras desplegarla.\n</code></pre> <p>El archivo <code>package.json</code> tiene que quedar as\u00ed:</p> <p></p>"},{"location":"practica3_PaaS/#aplicacion-para-netlify","title":"Aplicaci\u00f3n para Netlify","text":"<p>Puesto que el inter\u00e9s en este m\u00f3dulo radica en el proceso de despliegue, suponiendo que la parte de desarrollo ya es abordada en otros m\u00f3dulos, vamos a utilizar una aplicaci\u00f3n de ejemplo que nos ahorre tiempo para centrarnos en el despliegue.</p> <p>Nos clonaremos este repositorio:</p> <p><code>git clone https://github.com/StackAbuse/color-shades-generator</code></p> <p></p>"},{"location":"practica3_PaaS/#proceso-de-despliegue-en-netlify","title":"Proceso de despliegue en Netlify","text":"<p>Por mera curiosidad y ambici\u00f3n de aprendizaje, vamos a ver dos m\u00e9todos de despliegue en Netlify:</p> <ul> <li>Despliegue manual desde el CLI de Netlify, es decir, desde el terminal, a partir de un directorio local de nuestra m\u00e1quina.</li> <li>Despliegue desde un c\u00f3digo publicado en uno de nuestros repositorios de Github</li> </ul> <p>El primero nos permitir\u00e1 conocer el CLI de Netlify y el segundo nos acercara m\u00e1s a una experiencia real de despliegue.</p> <p>Task</p> <pre><code>Vuestra primera tarea ser\u00e1 [registraros en Netlify](https://www.netlify.com/) con vuestro email (no con vuestra cuenta de Github) y decirle que no cuando os pida enlazar con vuestra cuenta de Github (lo haremos m\u00e1s adelante).\n</code></pre> <p></p>"},{"location":"practica3_PaaS/#despliegue-mediante-cli","title":"Despliegue mediante CLI","text":"<p>Una vez registrados, debemos instalar el CLI de Netlify para ejecutar sus comandos desde el terminal:</p> <p><code>sudo npm install netlify-cli -g</code></p> <p></p> <p>Est\u00e1 claro que para realizar acciones de deploy, Netlify nos solicitar\u00e1 una autenticaci\u00f3n, esto se hace mediante el comando:</p> <p><code>netlify login</code></p> <p>Vamos al navegador y autorizamos el inicio de sesi\u00f3n</p> <p></p> <p>Ya hemos iniciado sesi\u00f3n</p> <p></p> <p>El cual nos muestra una pantalla del navegador para que concedamos la autorizaci\u00f3n pertinente. Sin embargo, recordemos el problema de que estamos conectados por SSH a nuestro servidor y no tenemos la posibilidad del uso de un entorno gr\u00e1fico.</p> <p>En este caso, siguiendo las instrucciones de la documentaci\u00f3n:</p> <p>Generamos el token de acceso</p> <p></p> <p></p> <p></p> <ul> <li>Lo establecemos como variable de ambiente:</li> </ul> <p></p> <p></p> <p></p> <p>Y nos logueamos</p> <p><code>netlify login</code></p> <p></p> <p>Bueno, tenemos el c\u00f3digo de nuestra aplicaci\u00f3n, tenemos nuestra cuenta en Netlify y tenemos el CLI necesario para ejecutar comandos desde el terminal en esa cuenta... \u00bfPodemos proceder al despliegue sin mayores complicaciones?</p> <p>La respuesta es NO, como buenos desarrolladores y en base a experiencias anteriores, ya sab\u00e9is que hay que hacer un build de la aplicaci\u00f3n para, posteriormente, desplegarla. Vamos a ello.</p> <p>En primer lugar, como sabemos, debemos instalar todas las dependencias que vienen indicadas en el archivo <code>package.json</code>:</p> <p><code>npm install</code></p> <p></p> <p>Y cuando ya las tengamos instaladas podemos proceder a realizar el build:</p> <p><code>npm run build</code></p> <p></p> <p>Esto nos crear\u00e1 una nueva carpeta llamada <code>build</code> que contendr\u00e1 la aplicaci\u00f3n que debemos desplegar. Y ya podemos hacer un pre-deploy de la aplicaci\u00f3n de la que hemos hecho build antes:</p> <p><code>netlify deploy</code></p> <p>Nos har\u00e1 algunas preguntas para el desplieuge: - Indicamos que queremos crear y configurar un nuevo site - El Team lo dejamos por defecto - Le indicamos el nombre que queremos emplear para la web (<code>nombre-practica3-4</code>) y el directorio a utilizar para el deploy (directorio <code>./build</code>).</p> <p></p> <p>Y si nos indica que todo ha ido bien e incluso podemos ver el \"borrador\" (Website Draft URL) de la web que nos aporta, podemos pasarla a producci\u00f3n finalmente tal y como nos indica la misma salida del comando:</p> <p></p> <pre><code>If everything looks good on your draft URL, deploy it to your main site URL with the --prod flag.\n\nnetlify deploy --prod\n</code></pre> <p>Warning</p> <pre><code>No olvides desplegar finalmente en producci\u00f3n y comprobar que puedes acceder a la URL.\n</code></pre> <p></p>"},{"location":"practica3_PaaS/#resultado","title":"RESULTADO","text":""},{"location":"practica3_PaaS/#despliegue-mediante-conexion-con-github","title":"Despliegue mediante conexi\u00f3n con Github","text":"<p>En primer lugar, vamos a eliminar el site que hemos desplegado antes en Netlify para evitarnos cualquier problema y/o conflicto:</p> <p></p> <p>Confirmamos la eliminaci\u00f3n con el nombre del proyecto</p> <p></p> <p>En segundo lugar, vamos a borrar el directorio donde se halla el repositorio clonado en el paso anterior para as\u00ed poder empezar de 0:</p> <p><code>rm -rf directorio_repositorio</code></p> <p></p> <p>Como queremos simular que hemos picado el c\u00f3digo a man o en local y lo vamos a subir a Github por primera vez, nos descargaremos los fuentes en formato .zip sin que tenga ninguna referencia a Github:</p> <p><code>wget https://github.com/StackAbuse/color-shades-generator/archive/refs/heads/main.zip</code></p> <p></p> <p>Creamos una carpeta nueva y descomprimimos dentro el zip:</p> <pre><code>mkdir practica3.4\n\nunzip main.zip -d practica3.4/\n</code></pre> <p></p> <p>Entramos en la carpeta donde est\u00e1 el c\u00f3digo:</p> <p><code>cd practica3.4/color-shades-generator-main/</code></p> <p></p> <p>Ahora debemos crear un repositorio completamente vac\u00edo en Github que se llame <code>practicaTresCuatro</code>:</p> <p></p> <p></p> <p>Y tras ello, volviendo al terminal a la carpeta donde est\u00e1bamos, la iniciamos como repositorio, a\u00f1adimos todo el contenido de la misma para el commit, hacemos el commit con el mensaje correspondiente y creamos la rama main:</p> <pre><code>$ git init\n$ git add .\n$ git commit -m \"Subiendo el c\u00f3digo...\"\n$ git branch -M main\n</code></pre> <p></p> <p>Y ahora s\u00f3lo queda referenciar nuestra carpeta al repositorio reci\u00e9n creado en Github y hacer un <code>push</code> para subir todo el contenido del commit a \u00e9l:</p> <pre><code>$ git remote add origin https://github.com/username/practicaTresCuatro.git\n$ git push -u origin main\n</code></pre> <p></p> <p></p> <p>Ahora que ya tenemos subido el c\u00f3digo a GitHub, de alguna manera debemos enganchar o enlazar nuestra cuenta de Github con la de Netlify para que \u00e9ste \u00faltimo pueda traerse el c\u00f3digo de all\u00ed, hacer el build y desplegarlo. As\u00ed pues, entramos en nuestro dashboard de Netlify y le damos a importar proyecto existente de <code>git</code>:</p> <p></p> <p>Le indicamos que concretamente de Github:</p> <p></p> <p>Y nos saltar\u00e1 una ventana pidiendo que autoricemos a Netlify a acceder a nuestros repositorios de Github:</p> <p></p> <p>Y luego le indicaremos que no acceda a todos nuestros repositorios sino s\u00f3lo al repositorio que necesitamos, que es donde tenemos el c\u00f3digo de nuestra aplicaci\u00f3n:</p> <p></p> <p>Y ya quedar\u00e1 todo listo:</p> <p></p> <p>Y desplegamos la aplicaci\u00f3n:</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Netlify se encargar\u00e1 de hacer el <code>build</code> de forma autom\u00e1tica tal y como hemos visto en la imagen de arriba, con el comando <code>npm run build</code>, publicando el contenido del directorio <code>build</code>.</p> <p>Atenci\u00f3n</p> <pre><code>Tras el deploy, en \"Site settings\" pode\u00eds y deb\u00e9is cambiar el nombre de la aplicaci\u00f3n por nombre-practica3-4, donde *nombre* es vuestro nombre.\n</code></pre> <p>Lo que hemos conseguido de esta forma es que, cualquier cambio que hagamos en el proyecto y del que hagamos <code>commit</code> y <code>push</code> en Github, autom\u00e1ticamente genere un nuevo despliegue en Netlify. Es el principio de lo que m\u00e1s adelante veremos como despliegue continuo.</p> <p>Comprobemos que realmente es as\u00ed:</p> <ul> <li>Dentro de la carpeta <code>public</code> encontramos el archivo <code>robots.txt</code>, cuyo cometido es indicar a los rastreadores de los buscadores a qu\u00e9 URLs del sitio pueden acceder. A este archivo se puede acceder a trav\u00e9s de la URL del site:</li> </ul> <p></p> <ul> <li>Dentro de la carpeta <code>public</code>, utilizando el editor de texto que prefir\u00e1is en vuestro terminal, modificad el archivo <code>robots.txt</code> para que excluya un directorio que se llame <code>nombre_apellido</code>, utilizando obviamente vuestro nombre y apellido.</li> </ul> <pre><code>User-agent: *\nDisallow: /nombre_y_apellido/\n</code></pre> <p></p> <ul> <li> <p>Haz un nuevo <code>commit</code> y <code>push</code> (del caso anterior, recuerda el commando <code>git</code> previo para a\u00f1adir los archivos a hacer commit)</p> </li> <li> <p>Comprueba en el dashboard de Netlify que se ha producido un nuevo deploy de la aplicaci\u00f3n hace escasos segundos</p> </li> </ul> <p></p> <p></p> <p>Accede a <code>https://url_de_la_aplicacion/robots.txt</code> y comprueba que, efectivamente, se ve reflejado el cambio</p> <p></p> <p>Task</p> <pre><code>Documenta la realizaci\u00f3n de toda esta pr\u00e1ctica adecuadamente, con las explicaciones y justificaciones necesarias y las capturas de pantalla pertinentes.\n</code></pre>"},{"location":"practica3_PaaS/#vercel","title":"VERCEL","text":"<p>Task</p> <pre><code>Repite y replica este proceso de despliegue en [Vercel](https://vercel.com/), otra plataforma PaaS.\n</code></pre> <p>Seleccionamos la opci\u00f3n de seguir con GitHub</p> <p></p> <p>Autorizamos que Vercel tenga persmisos para conectarse a Git</p> <p></p> <p>Instalamos Vercel en nuestro repositorio PracticaTresCuatro de GitHub</p> <p></p> <p>Desplegamos el proyecto</p> <p></p> <p>Tras esto ya tenemos nuestro proyecto desplegado</p> <p></p>"},{"location":"practica3_PaaS/#resultado_1","title":"RESULTADO","text":"<p>Si vamos a https://practica-tres-cuatro-seven.vercel.app nos mostrar\u00e1 la app desplegada.</p> <p></p>"},{"location":"practica3_PaaS/#referencias","title":"Referencias","text":"<p>\u00bfQu\u00e9 es Github?</p> <p>Deploying Node.js applications</p> <p>How to deploy your website to Netlify for free</p> <p>4 Ways To Deploy Your Static Site with Netlify</p> <p>Guide to Deploying a React App to Netlify</p>"},{"location":"practica4_Flask/","title":"Pr\u00e1ctica 3.4: Despliegue de una aplicaci\u00f3n Flask (Python)","text":""},{"location":"practica4_Flask/#prerrequisitos","title":"Prerrequisitos","text":"<p>Servidor Debian con los siguientes paquetes instalados:</p> <ul> <li>Nginx</li> <li>Gunicorn</li> <li>Pipenv</li> </ul>"},{"location":"practica4_Flask/#introduccion","title":"Introducci\u00f3n","text":""},{"location":"practica4_Flask/#que-es-un-framework","title":"\u00bfQu\u00e9 es un framework?","text":"<p>Actualmente en el desarrollo moderno de aplicaciones web se utilizan distintos Frameworks que son herramientas que nos dan un esquema de trabajo y una serie de utilidades y funciones que nos facilita y nos abstrae de la construcci\u00f3n de p\u00e1ginas web din\u00e1micas.</p> <p>En general los Frameworks est\u00e1n asociado a lenguajes de programaci\u00f3n (Ruby on Rails (Ruby), Symphony (PHP)), en el mundo de Python el m\u00e1s conocido es Django pero Flask es una opci\u00f3n que quiz\u00e1s no tenga una curva de aprendizaje tan elevada pero nos posibilita la creaci\u00f3n de aplicaciones web igual de complejas de las que se pueden crear en Django.</p>"},{"location":"practica4_Flask/#flask","title":"Flask","text":"<p>En la actualidad existen muchas opciones para crear p\u00e1ginas web y muchos lenguajes (PHP, JAVA), y en este caso Flask nos permite crear de una manera muy sencilla aplicaciones web con Python.</p> <p>Flask es un \u201cmicro\u201d Framework escrito en Python y concebido para facilitar el desarrollo de Aplicaciones Web bajo el patr\u00f3n MVC.</p> <p>La palabra \u201cmicro\u201d no designa a que sea un proyecto peque\u00f1o o que nos permita hacer p\u00e1ginas web peque\u00f1as sino que al instalar Flask tenemos las herramientas necesarias para crear una aplicaci\u00f3n web funcional pero si se necesita en alg\u00fan momento una nueva funcionalidad hay un conjunto muy grande extensiones (plugins) que se pueden instalar con Flask que le van dotando de funcionalidad.</p> <p></p> <p>De principio en la instalaci\u00f3n no se tienen todas las funcionalidades que se pueden necesitar pero de una manera muy sencilla se pueden extender el proyecto con nuevas funcionalidades por medio de plugins.</p> <p>El patr\u00f3n MVC es una manera o una forma de trabajar que permite diferenciar y separar lo que es el modelo de datos (los datos que van a tener la App que normalmente est\u00e1n guardados en BD), la vista (p\u00e1gina HTML) y el controlador (donde se gestiona las peticiones de la app web).</p>"},{"location":"practica4_Flask/#gunicorn","title":"Gunicorn","text":"<p>Cuando se implementa una aplicaci\u00f3n web basada en Python, normalmente se tienen estas tres piezas:</p> <ul> <li>Servidor web (Nginx, Apache)</li> <li>Servidor de aplicaciones WSGI (Gunicorn, uWSGI, mod_wsgi, Waitress)</li> <li>Aplicaci\u00f3n web (Django, Flask, Pyramid, FastAPI)</li> </ul> <p>Los servidores web procesan y distribuyen las solicitudes de los navegadores y otros clientes y env\u00edan respuestas a los mismos.</p> <p>WSGI (Web Server Gateway Interface) proporciona un conjunto de reglas para estandarizar el comportamiento y la comunicaci\u00f3n entre servidores web y aplicaciones web. Mediante el uso de servidores y aplicaciones web compatibles con WSGI, los desarrolladores pueden concentrar su tiempo y energ\u00eda en el desarrollo de aplicaciones web en lugar de administrar la comunicaci\u00f3n entre la aplicaci\u00f3n y el servidor web.</p> <p></p> <p>Finalmente, Gunicorn, que es la abreviatura de Green Unicorn, es un servidor de aplicaciones WSGI que se encuentra entre el servidor web y su aplicaci\u00f3n web, gestionando la comunicaci\u00f3n entre los dos. Acepta solicitudes del servidor y las traduce (a trav\u00e9s de WSGI) en algo que la aplicaci\u00f3n web puede entender antes de pasarla a la aplicaci\u00f3n web real. Env\u00eda respuestas desde la aplicaci\u00f3n web al servidor. Tambi\u00e9n se encarga de ejecutar varias instancias de la aplicaci\u00f3n web, reinici\u00e1ndolas seg\u00fan sea necesario y distribuyendo solicitudes a instancias saludables.</p>"},{"location":"practica4_Flask/#gestor-de-paquetes-pip","title":"Gestor de paquetes <code>pip</code>","text":"<p><code>pip</code> es el comando para instalar paquetes de Python integrados en las fuentes desde la versi\u00f3n 3.4.</p> <p>Este comando automatiza la conexi\u00f3n al sitio https://pypi.org/, la descarga, la instalaci\u00f3n e incluso la compilaci\u00f3n del m\u00f3dulo solicitado.</p> <p>Adem\u00e1s, se ocupa de las dependencias de cada paquete.</p>"},{"location":"practica4_Flask/#entornos-virtuales-en-python","title":"Entornos virtuales en Python","text":"<p>Un entorno virtual es una forma de tener m\u00faltiples instancias paralelas del int\u00e9rprete de Python, cada una con diferentes conjuntos de paquetes y diferentes configuraciones. Cada entorno virtual contiene una copia independiente del int\u00e9rprete de Python, incluyendo copias de sus utilidades de soporte.</p> <p>Los paquetes instalados en cada entorno virtual s\u00f3lo se ven en ese entorno virtual y en ning\u00fan otro. Incluso los paquetes grandes y complejos con binarios dependientes de la plataforma pueden ser acorralados entre s\u00ed en entornos virtuales.</p> <p>De esta forma, tendremos entornos independientes entre s\u00ed, parecido a como ocurr\u00eda con los directorios de los proyectos de <code>Node.js</code>. De este modo, los entornos virtuales de Python nos permiten instalar un paquete de Python en una ubicaci\u00f3n aislada en lugar de instalarlo de manera global.</p>"},{"location":"practica4_Flask/#pipenv","title":"Pipenv","text":"<p><code>Pipenv</code> es una herramienta que apunta a traer todo lo mejor del mundo de empaquetado (bundler, composer, npm, cargo, yarn, etc.) al mundo de Python.</p> <p></p> <p>Autom\u00e1ticamente crea y maneja un entorno virtual para tus proyectos, tambi\u00e9n permite agregar/eliminar paquetes desde tu Pipfile as\u00ed como como instalar/desinstalar paquetes. Tambi\u00e9n genera lo m\u00e1s importante , el archivo <code>Pipfile.lock</code>, que es usado para producir determinado build.</p> <p></p>"},{"location":"practica4_Flask/#procedimiento-completo-para-el-despliegue","title":"Procedimiento completo para el despliegue","text":"<ol> <li> <p>Instalamos el gestor de paquetes de Python pip:</p> <p><code>sudo apt update sudo apt install python3-pip</code></p> <p> </p> </li> <li> <p>Instalamos el paquete <code>pipenv</code> para gestionar los entornos virtuales:</p> <p><code>sudo apt install pipenv</code></p> <p></p> </li> <li> <p>Y comprobamos que est\u00e1 instalado correctamente mostrando su versi\u00f3n:</p> <p><code>pipenv --version</code></p> <p></p> </li> <li> <p>Creamos el directorio en el que almacenaremos nuestro proyecto:</p> <p><code>sudo mkdir /var/www/nombre_mi_aplicacion</code></p> <p></p> </li> <li> <p>Al crearlo con <code>sudo</code>, los permisos pertenecen a root:</p> </li> </ol> <p><code>ls -la | grep jorge_mi_aplicacion</code></p> <p></p> <ol> <li> <p>Hay que cambiarlo para que el due\u00f1o sea nuestro usuario (<code>usuario</code> en mi caso) y pertenezca al grupo <code>www-data</code>, el usuario usado por defecto por el servidor web para correr:</p> <p><code>sudo chown -R $USER:www-data /var/www/mi_aplicacion</code></p> <p></p> </li> <li> <p>Establecemos los permisos adecuados a este directorio, para que pueda ser le\u00eddo por todo el mundo:</p> <p><code>chmod -R 775 /var/www/mi_aplicacion</code></p> <p>Warning</p> <p>Es indispensable asignar estos permisos, de otra forma obtendr\u00edamos un error al acceder a la aplicaci\u00f3n cuando pongamos en marcha Nginx</p> <p></p> </li> <li> <p>Dentro del directorio de nuestra aplicaci\u00f3n, creamos un archivo oculto <code>.env</code> que contendr\u00e1 las variables de entorno necesarias:</p> <p><code>touch .env</code></p> <p></p> </li> <li> <p>Editamos el archivo y a\u00f1adimos las variables, indicando cu\u00e1l es el archivo <code>.py</code> de la aplicaci\u00f3n y el entorno, que en nuestro caso ser\u00e1 producci\u00f3n:</p> <p> </p> <p>Nota</p> <p>En el mundo laboral real, se supone que la aplicaci\u00f3n previamente ha pasado por los entornos de dev, test y preprod para el desarrollo y prueba de la misma, antes de pasarla a producci\u00f3n.</p> </li> <li> <p>Iniciamos ahora nuestro entorno virtual. <code>Pipenv</code> cargar\u00e1 las variables de entorno desde el fichero <code>.env</code> de forma autom\u00e1tica:</p> <p><code>pipenv shell</code></p> <p>Veremos que se nos inicia el entorno virtual, cosa que comprobamos porque aparece su nombre al inicio del prompt del shell (En mi caso aparece jorge_mi_aplicacion-xMdhWSUy):</p> <p></p> </li> <li> <p>Usamos <code>pipenv</code> para instalar las dependencias necesarias para nuestro proyecto:</p> <p><code>pipenv install flask gunicorn</code></p> <p></p> </li> <li> <p>Vamos ahora a crear la aplicaci\u00f3n Flask m\u00e1s simple posible, a modo de PoC (proof of concept o prueba de concepto). El archivo que contendr\u00e1 la aplicaci\u00f3n propiamente dicha ser\u00e1 <code>application.py</code> y <code>wsgi.py</code> se encargar\u00e1 \u00fanicamente de iniciarla y dejarla corriendo:</p> <p><code>touch application.py wsgi.py</code></p> <p>Y tras crear los archivos, los editamos para dejarlos as\u00ed:</p> <p><code>application.py</code></p> <p> </p> <p><code>wsgi.py</code></p> <p> </p> </li> <li> <p>Corramos ahora nuestra aplicaci\u00f3n a modo de comprobaci\u00f3n con el servidor web integrado de Flask. Si especificamos la direcci\u00f3n <code>0.0.0.0</code> lo que le estamos diciendo al servidor es que escuche en todas sus interfaces, si las tuviera:</p> <p></p> </li> <li> <p>Ahora podremos acceder a la aplicaci\u00f3n desde nuestro ordenador, nuestra m\u00e1quina anfitri\u00f3n, introduciendo en un navegador web: http://IP-maq-virtual:5000:</p> <p></p> <p>Tras la comprobaci\u00f3n, paramos el servidor con <code>CTRL+C</code> </p> </li> <li> <p>Comprobemos ahora que Gunicorn funciona correctamente tambi\u00e9n. Si os ha funcionado el servidor de desarrollo de Flask, pod\u00e9is usar el siguiente comando para probar que la alicaci\u00f3n funciona correctamente usando Gunicorn, accediendo con vuestro navegador de la misma forma que en el paso anterior:</p> <p><code>gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app</code></p> <p></p> <p>Donde:   - <code>--workers N</code> establece el n\u00famero de <code>workers</code> o hilos que queremos utilizar, como ocurr\u00eda con Node Express. Depender\u00e1 del n\u00famero de cores que le hayamos dado a la CPU de nuestra m\u00e1quina virtual.   - <code>--bind 0.0.0.0:5000</code> hace que el servidor escuche peticiones por todas sus interfaces de red y en el puerto 5000   - <code>wsgi:app</code> es el nombre del archivo con extensi\u00f3n <code>.py</code> y <code>app</code> es la instancia de la aplicaci\u00f3n Flask dentro del archivo.</p> </li> <li> <p>Todav\u00eda dentro de nuestro entorno virtual, debemos tomar nota de cual es el path o ruta desde la que se ejecuta <code>gunicorn</code> para poder configurar m\u00e1s adelante un servicio del sistema. Podemos averigurarlo as\u00ed:</p> <p><code>which gunicorn</code></p> <p></p> <p>En mi caso es <code>/home/usuario/.local/share/virtualenvs/jorge_mi_aplicacion-xMdhWSUy/bin/gunicorn</code></p> <p>Tip</p> <p>Y tras ello debemos salir de nuestro entorno virtual con el sencillo comando <code>deactivate</code></p> <p></p> </li> <li> <p>Puesto que ya debemos tener instalado Nginx en nuestro sistema, lo ininciamos y comprobamos que su estado sea activo:</p> <p><code>sudo systemctl start nginx sudo systemctl status nginx</code></p> <p></p> </li> <li> <p>Ya fuera de nuestro entorno virtual, crearemos un archivo para que systemd corra Gunicorn como un servicio del sistema m\u00e1s:</p> <p></p> <p>Donde:   - <code>User</code>: Establece el usuario que tiene permisos sobre el directorio del proyecto (el que pusist\u00e9is en el paso 5)   - <code>Group</code>: Establece el grupo que tiene permisos sobre el directorio del proyecto (el que pusist\u00e9is en el paso 5)   - <code>Environment</code>: Establece el directorio <code>bin</code> (donde se guardan los binarios ejecutables) dentro del entorno virtual (lo vist\u00e9is en el paso 14)   - <code>WorkingDirectory</code>: Establece el directorio base donde reside nuestro proyecto   - <code>ExecStart</code>: Establece el path donde se encuentra el ejecutable de <code>gunicorn</code> dentro del entorno virtual, as\u00ed como las opciones y comandos con los que se iniciar\u00e1</p> <p>Warning</p> <p>Deb\u00e9is cambiar los valores para que coincidan con los de vuestro caso particular.</p> </li> <li> <p>Ahora, como cada vez que se crea un servicio nuevo de <code>systemd</code>, se habilita y se inicia:</p> <p><code>systemctl enable nombre_mi_servicio systemctl start nombre_mi_servicio</code></p> <p></p> <p>Recordad que el nombre del servicio es el nombre del archivo que creast\u00e9is en el paso anterior.</p> <p>Pasemos ahora a configurar Nginx, que es algo que ya deber\u00edamos tener dominado de cap\u00edtulos anteriores.</p> </li> <li> <p>Creamos un archivo con el nombre de nuestra aplicaci\u00f3n y dentro estableceremos la configuraci\u00f3n para ese sitio web. El archivo, como record\u00e1is, debe estar en <code>/etc/nginx/sites-available/nombre_aplicacion</code> y tras ello lo editamos para que quede:</p> <p>``` server {     listen 80;     server_name mi_aplicacion www.mi_aplicacion; </p> <pre><code>access_log /var/log/nginx/mi_aplicacion.access.log; \nerror_log /var/log/nginx/mi_aplicacion.error.log;\n\nlocation / { \n        include proxy_params;\n        proxy_pass http://unix:/var/www/nombre_aplicacion/nombre_aplicacion.sock; \n}\n</code></pre> <p>}  ```</p> </li> </ol> <p></p> <p>Informaci\u00f3n</p> <p>server_name mi_aplicacion www.mi_aplicacion; -&gt; Nombre del dominio, ya veremos m\u00e1s adelante como el DNS resolver\u00e1 este nombre para acceder a nuestra aplicaci\u00f3n.</p> <p>access_log /var/log/nginx/mi_aplicacion.access.log; -&gt; D\u00f3nde estar\u00e1n ubicados los logs de acceso y de errores.</p> <p>proxy_pass http://unix:/var/www/nombre_aplicacion/nombre_aplicacion.sock; -&gt; Bloque donde se le indica a Nginx que haga de proxy inverso hacia el socket creado en nuestra propia m\u00e1quina por gunicorn para acceder a nuestra aplicaci\u00f3n Flask.</p> <ol> <li> <p>Recordemos que ahora debemos crear un link simb\u00f3lico del archivo de sitios webs disponibles al de sitios web activos:</p> <p><code>sudo ln -s /etc/nginx/sites-available/nombre_aplicacion /etc/nginx/sites-enabled/</code></p> <p>Y nos aseguramos de que se ha creado dicho link simb\u00f3lico:</p> <p><code>ls -l /etc/nginx/sites-enabled/ | grep nombre_aplicacion</code></p> <p></p> </li> <li> <p>Nos aseguramos de que la configuraci\u00f3n de Nginx no contiene errores, reiniciamos Nginx y comprobamos que se estado es activo:</p> <p><code>nginx -t sudo systemctl restart nginx sudo systemctl status nginx</code></p> <p></p> </li> <li> <p>Ya no podremos acceder por IP a nuestra aplicaci\u00f3n ya que ahora est\u00e1 siendo servida por Gunicorn y Nginx, necesitamos acceder por su <code>server_name</code>. Puesto que a\u00fan no hemos tratado con el DNS, vamos a editar el archivo <code>/etc/hosts</code> de nuestra m\u00e1quina anfitriona para que asocie la IP de la m\u00e1quina virtual, a nuestro <code>server_name</code>.</p> <p>Este archivo, en Linux, est\u00e1 en: <code>/etc/hosts</code></p> <p>Y en Windows: <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code></p> <p>Y deberemos a\u00f1adirle la l\u00ednea:</p> <p><code>192.168.X.X myproject www.myproject</code></p> <p></p> <p>donde deb\u00e9is sustituir la IP por la que tenga vuestra m\u00e1quina virtual.</p> </li> <li> <p>El \u00faltimo paso es comprobar que todo el desplieuge se ha realizado de forma correcta y est\u00e1 funcionando, para ello accedemos desde nuestra m\u00e1quina anfitri\u00f3n a:</p> <p><code>http://nombre_aplicacion</code></p> <p>O:</p> <p><code>http://www.nombre_aplicacion</code></p> <p>Y deber\u00eda mostraros la misma p\u00e1gina que en el paso 14:</p> <p></p> <p>Ejercicio</p> <p>Repite todo el proceso con la aplicaci\u00f3n del siguiente repositorio: <code>https://github.com/raul-profesor/Practica-3.5</code></p> <p>Recuerda que deber\u00e1s clonar el repositorio en tu directorio <code>/var/www</code>:</p> <p><code>git clone https://github.com/raul-profesor/Practica-3.5</code></p> <p>Y, tras activar el entorno virtual dentro del directorio del repositorio clonado, para instalar las dependencias del proyecto de la aplicaci\u00f3n deber\u00e1s hacer:</p> <p><code>pipenv install -r requirements.txt</code></p> <p>Y un \u00faltimo detalle, si mir\u00e1is el c\u00f3digo del proyecto, que es muy sencillo, ver\u00e9is que Gunicorn debe iniciarse ahora as\u00ed:</p> <p><code>gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app</code></p> <p>Y el resto ser\u00eda proceder tal y como hemos hecho en esta pr\u00e1ctica.</p> </li> </ol> <p>Clonamos el repositorio de git</p> <p></p> <p>Tras clonar el repositorio debemos darle los permisos necesarios al directorio creado:</p> <p></p> <p>Activaci\u00f3n del entorno virutal dentro del directorio del repositorio clonado</p> <p></p> <p>Instalamos flask y gunicorn</p> <p></p> <p>Para instalar las dependencias tenemos que utilizar el comando <code>pipenv install -r rquirements.txt</code> </p> <p></p> <p>Creamos y configuramos el archivo wsgi.py correctamente</p> <p></p> <p>Iniciamos Gunicorn con el comando <code>gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app</code></p> <p></p> <p>Desde nuestra m\u00e1quina anfitiona accedemos a <code>http://&lt;IP-del-servidor&gt;:5000</code></p> <p></p> <p>Tomamos nota de cual es el path desde donde se ejecuta <code>gunicorn</code> con el comando <code>which gunicorn</code> (<code>/home/usuario/.local/share/virtualenvs/Practica-3.5-fn2PEgVy/bin/gunicorn</code>) en mi caso</p> <p></p> <p>Tras ello salimos del entorno virtual</p> <p></p> <p>Iniciamos Nginx</p> <p></p> <p>Creamos un archivo para que <code>systemd</code> corra Gunicorn como un servicio del sistema</p> <p></p> <p>Debemos poner algo como:</p> <pre><code>[Unit]\nDescription=Practica-3-5.service - Una aplicacion flask de ejemplo con Gunicorn\nAfter=network.target\n\n[Service]\nUser=usuario\nGroup=www-data\nEnviroment=\"PATH=/home/usuario/.local/share/virtualenvs/Practica-3.5-fn2PEgVy/bin\"\nWorkingDirectory=/var/www/Practica-3.5/\nExecStart=/home/usuario/.local/share/virtualenvs/Practica-3.5-fn2PEgVy/bin/gunicorn --workers 3 --bind unix:/var/www/Practica-3.5.sock wsgi:app\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Habilitamos y iniciamos el servicio que acabamos de crear</p> <p></p> <p>Creamos un archivo de configuraci\u00f3n para Nginx</p> <p></p> <p>Creamos un enlace simpb\u00f3lico para habilitar el sitio</p> <p></p> <p>Verificamos y reiniciamos nginx</p> <p></p> <p>Configuraci\u00f3n del archivo /etc/hosts de nuestra m\u00e1quina anfitriona para comprobar que el despliegue ha sido exitoso</p> <p></p> <p>Accedemos a http://practica-3.5 en nuestra m\u00e1quina anfitriona para comprobar que el despliegue ha tenido \u00e9xito.</p> <p></p> <p>Warning</p> <p>Documenta adecuadamente con explicaciones y capturas de pantalla los procesos de despliegue de ambas aplicaciones en Flask, as\u00ed como las respuestas a las cuestiones planteadas.</p>"},{"location":"practica4_Flask/#cuestiones","title":"Cuestiones","text":"<p>Cuestion 1</p> <p>Busca, lee, entiende y explica qu\u00e9 es y para que sirve un servidor WSGI</p> <p>WSGI (Web Server Gateway Interface) es un componente clave en el desarrollo web con Python. Es un intermediario entre servidor web (en nuestro caso Nginx) y las aplicaciones creadas con Python.</p> <p>Es una especificaci\u00f3n estandar que define como las aplicaciones y los servidores deben atuar entre ellos, haciendo que cualquier servidor compatible con WSGI sea capaz de ejecutar cualquier aplicaci\u00f3n Python que tambi\u00e9n cumpla una especificaci\u00f3n.</p> <p>B\u00e1sicamente recibe solicitudes HTTP de los usuarios, las pasa a la aplicaci\u00f3n Python y transmite la respuesta creada de vuelta al usuario. Ayuda a que se pueda cambiar el servidor WSGI sin necesidad de modificar la aplicaci\u00f3n.</p> <p>En resumen, es esencial para que una aplicaci\u00f3n escrita en Python pueda ser desplegada y ejecutada en un entorno de servidor, gestionando la interacci\u00f3n entre el servidor web y la aplicaci\u00f3n de manera eficiente y escalable.</p>"},{"location":"practica4_Flask/#tareas-de-ampliacion","title":"Tareas de ampliaci\u00f3n","text":"<p>Ampliaci\u00f3n</p> <p>Despliega cualquiera de las dos aplicaciones Flask presentadas aqu\u00ed en Heroku.</p>"},{"location":"practica4_Flask/#referencias","title":"Referencias","text":"<p>\u00bfQu\u00e9 es Flask?</p> <p>Deploy Flask The Easy Way With Gunicorn and Nginx!</p> <p>Deploy flask app with Nginx using Gunicorn</p>"}]}